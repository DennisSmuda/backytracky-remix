{
  "version": 3,
  "sources": ["empty-module:~/components/track/TrackPlayer.client", "empty-module:~/components/sequencer/Sequencer.client", "empty-module:~/components/track/TrackEditor.client", "empty-module:~/components/GuitarTuner.client", "../app/entry.server.tsx", "../app/root.tsx", "../app/utils/ThemeProvider.tsx", "../app/components/Navbar.tsx", "../app/utils/session.server.ts", "../app/utils/db.server.ts", "../app/utils/theme.server.ts", "../app/routes/_auth.register.tsx", "../app/routes/track.$trackId.tsx", "../app/components/PageHeader.tsx", "../app/utils/tracks.server.ts", "../app/routes/_auth.logout.tsx", "../app/routes/_auth.login.tsx", "../app/components/BackgroundNotes.tsx", "../app/components/TextInput.tsx", "../app/routes/auth/utils.tsx", "../app/routes/generator.tsx", "../app/routes/track.new.tsx", "../app/music/utils.ts", "../app/music/ChordBeat.ts", "../app/components/track/ChordEditorModal.tsx", "../node_modules/tone/Tone/version.ts", "../node_modules/tone/Tone/core/context/AudioContext.ts", "../node_modules/tone/Tone/core/util/Debug.ts", "../node_modules/tone/Tone/core/util/TypeCheck.ts", "../node_modules/tone/Tone/core/clock/Ticker.ts", "../node_modules/tone/Tone/core/util/AdvancedTypeCheck.ts", "../node_modules/tone/Tone/core/util/Defaults.ts", "../node_modules/tone/Tone/core/Tone.ts", "../node_modules/tone/Tone/core/util/Math.ts", "../node_modules/tone/Tone/core/util/Timeline.ts", "../node_modules/tone/Tone/core/context/ContextInitialization.ts", "../node_modules/tone/Tone/core/util/Emitter.ts", "../node_modules/tone/Tone/core/context/BaseContext.ts", "../node_modules/tone/Tone/core/context/Context.ts", "../node_modules/tone/Tone/core/context/DummyContext.ts", "../node_modules/tone/Tone/core/util/Interface.ts", "../node_modules/tone/Tone/core/context/ToneAudioBuffer.ts", "../node_modules/tone/Tone/core/context/OfflineContext.ts", "../node_modules/tone/Tone/core/Global.ts", "../node_modules/tone/Tone/core/type/Conversions.ts", "../node_modules/tone/Tone/core/type/TimeBase.ts", "../node_modules/tone/Tone/core/type/Time.ts", "../node_modules/tone/Tone/core/type/Frequency.ts", "../node_modules/tone/Tone/core/type/TransportTime.ts", "../node_modules/tone/Tone/core/context/ToneWithContext.ts", "../node_modules/tone/Tone/core/util/StateTimeline.ts", "../node_modules/tone/Tone/core/context/Param.ts", "../node_modules/tone/Tone/core/context/ToneAudioNode.ts", "../node_modules/tone/Tone/core/context/Gain.ts", "../node_modules/tone/Tone/source/OneShotSource.ts", "../node_modules/tone/Tone/signal/ToneConstantSource.ts", "../node_modules/tone/Tone/signal/Signal.ts", "../node_modules/tone/Tone/core/clock/TickParam.ts", "../node_modules/tone/Tone/core/clock/TickSignal.ts", "../node_modules/tone/Tone/core/clock/TickSource.ts", "../node_modules/tone/Tone/core/clock/Clock.ts", "../node_modules/tone/Tone/core/context/ToneAudioBuffers.ts", "../node_modules/tone/Tone/core/type/Ticks.ts", "../node_modules/tone/Tone/core/util/Draw.ts", "../node_modules/tone/Tone/core/util/IntervalTimeline.ts", "../node_modules/tone/Tone/component/channel/Volume.ts", "../node_modules/tone/Tone/core/context/Destination.ts", "../node_modules/tone/Tone/core/util/TimelineValue.ts", "../node_modules/tone/Tone/core/clock/TransportEvent.ts", "../node_modules/tone/Tone/core/clock/TransportRepeatEvent.ts", "../node_modules/tone/Tone/core/clock/Transport.ts", "../node_modules/tone/Tone/source/Source.ts", "../node_modules/tone/Tone/source/buffer/ToneBufferSource.ts", "../node_modules/tone/Tone/source/Noise.ts", "../node_modules/tone/Tone/source/oscillator/OscillatorInterface.ts", "../node_modules/tone/Tone/source/oscillator/ToneOscillatorNode.ts", "../node_modules/tone/Tone/source/oscillator/Oscillator.ts", "../node_modules/tone/Tone/signal/SignalOperator.ts", "../node_modules/tone/Tone/signal/WaveShaper.ts", "../node_modules/tone/Tone/signal/AudioToGain.ts", "../node_modules/tone/Tone/signal/Multiply.ts", "../node_modules/tone/Tone/source/oscillator/AMOscillator.ts", "../node_modules/tone/Tone/source/oscillator/FMOscillator.ts", "../node_modules/tone/Tone/source/oscillator/PulseOscillator.ts", "../node_modules/tone/Tone/source/oscillator/FatOscillator.ts", "../node_modules/tone/Tone/source/oscillator/PWMOscillator.ts", "../node_modules/tone/Tone/source/oscillator/OmniOscillator.ts", "../node_modules/tone/Tone/core/util/Decorator.ts", "../node_modules/tone/Tone/source/buffer/Player.ts", "../node_modules/tone/Tone/component/envelope/Envelope.ts", "../node_modules/tone/Tone/instrument/Instrument.ts", "../node_modules/tone/Tone/instrument/Monophonic.ts", "../node_modules/tone/Tone/component/envelope/AmplitudeEnvelope.ts", "../node_modules/tone/Tone/instrument/Synth.ts", "../node_modules/tone/Tone/instrument/MembraneSynth.ts", "../node_modules/tone/Tone/core/worklet/WorkletGlobalScope.ts", "../node_modules/tone/Tone/core/worklet/ToneAudioWorkletProcessor.worklet.ts", "../node_modules/tone/Tone/core/worklet/SingleIOProcessor.worklet.ts", "../node_modules/tone/Tone/core/worklet/DelayLine.worklet.ts", "../node_modules/tone/Tone/component/filter/FeedbackCombFilter.worklet.ts", "../node_modules/tone/Tone/instrument/Sampler.ts", "../node_modules/tone/Tone/component/channel/Panner.ts", "../node_modules/tone/Tone/effect/BitCrusher.worklet.ts", "../node_modules/tone/Tone/effect/Freeverb.ts", "../node_modules/tone/Tone/effect/JCReverb.ts", "../node_modules/tone/Tone/component/channel/Solo.ts", "../node_modules/tone/Tone/component/channel/PanVol.ts", "../node_modules/tone/Tone/component/channel/Channel.ts", "../node_modules/tone/Tone/core/context/Listener.ts", "../node_modules/tone/Tone/index.ts", "../app/hooks/useInstruments.ts", "../app/music/loader.ts", "../app/routes/_index.tsx", "../app/components/Footer.tsx", "../app/routes/tracks.tsx", "../app/components/track/TrackListing.tsx", "../app/routes/tuner.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "module.exports = {};", "module.exports = {};", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\n\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { LinksFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData } from\n\"@remix-run/react\";\nimport clsx from \"clsx\";\n\nimport { ThemeProvider, ThemeScript, useTheme } from \"./utils/ThemeProvider\";\nimport Navbar from \"./components/Navbar\";\n\nimport styles from \"./styles/app.css\";\nimport { getUser } from \"./utils/session.server\";\nimport { getThemeSession } from \"./utils/theme.server\";\nimport { Toaster } from \"react-hot-toast\";\nimport { Suspense } from \"react\";\n\nexport const links: LinksFunction = () => [{ rel: \"stylesheet\", href: styles }];\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  const themeSession = await getThemeSession(request);\n  return json({ user, theme: themeSession.getTheme() });\n};\n\nfunction App() {\n  const { user, theme: ssrTheme } = useLoaderData<typeof loader>();\n  const [theme] = useTheme();\n\n  return (\n    <html lang=\"en\" className={clsx(theme)}>\n      <head>\n        <Meta />\n        <Links />\n        <ThemeScript ssrTheme={Boolean(ssrTheme)} />\n        <link\n          rel=\"apple-touch-icon\"\n          sizes=\"180x180\"\n          href=\"/apple-touch-icon.png\" />\n\n        <link\n          rel=\"icon\"\n          type=\"image/png\"\n          sizes=\"32x32\"\n          href=\"/favicon-32x32.png\" />\n\n        <link\n          rel=\"icon\"\n          type=\"image/png\"\n          sizes=\"16x16\"\n          href=\"/favicon-16x16.png\" />\n\n        <link rel=\"manifest\" href=\"/site.webmanifest\" />\n        <link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\" />\n        <meta name=\"msapplication-TileColor\" content=\"#da532c\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width,initial-scale=1,viewport-fit=cover\" />\n\n        <meta name=\"theme-color\" content=\"#18181b\" />\n        <meta\n          property=\"og:title\"\n          content=\"Free Backing Tracks for Musicians | BackyTracky\" />\n\n        <meta\n          property=\"og:description\"\n          content=\"Create and play-along Lead-Sheets to level up your chops! Practice scales, licks or solos. Discover chord progressions others are using or make your own!\" />\n\n        <meta property=\"og:locale\" content=\"en_US\" />\n        <meta property=\"og:site_name\" content=\"BackyTracky\" />\n        <meta property=\"og:image\" content=\"/og-image.png\" />\n      </head>\n      <body>\n        <Navbar user={user} />\n\n        <Suspense fallback={<div>Loading...</div>}>\n          <Toaster />\n        </Suspense>\n\n        <Outlet />\n\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}\n\nexport default function AppWithProviders() {\n  const { theme } = useLoaderData<typeof loader>();\n  return (\n    <ThemeProvider specifiedTheme={theme}>\n      <App />\n    </ThemeProvider>);\n\n}", "/**\n * Credits: https://www.mattstobbs.com/remix-dark-mode/\n */\nimport { useFetcher } from \"@remix-run/react\";\nimport type { Dispatch, ReactNode, SetStateAction } from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { useContext } from \"react\";\nimport { useState } from \"react\";\nimport { createContext } from \"react\";\n\nenum Theme {\n  DARK = \"dark\",\n  LIGHT = \"light\",\n}\n\ntype ThemeContextType = [Theme | null, Dispatch<SetStateAction<Theme | null>>];\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nconst prefersDarkMQ = \"(prefers-color-scheme: dark)\";\nconst getPreferredTheme = () =>\n  window.matchMedia(prefersDarkMQ).matches ? Theme.DARK : Theme.LIGHT;\n\nconst clientThemeCode = `\n;(() => {\nconst theme = window.matchMedia(${JSON.stringify(prefersDarkMQ)}).matches\n    ? 'dark'\n    : 'light';\n  const cl = document.documentElement.classList;\n  const themeAlreadyApplied = cl.contains('light') || cl.contains('dark');\n  if (!themeAlreadyApplied) cl.add(theme);\n})();\n`;\n\nfunction ThemeScript({ ssrTheme }: { ssrTheme: boolean }) {\n  const [theme] = useTheme();\n\n  return (\n    <>\n      <meta\n        name=\"color-scheme\"\n        content={theme === \"light\" ? \"light dark\" : \"dark light\"}\n      />\n\n      {ssrTheme ? null : (\n        <script dangerouslySetInnerHTML={{ __html: clientThemeCode }} />\n      )}\n    </>\n  );\n}\n\nconst themes: Array<Theme> = Object.values(Theme);\n\nfunction isTheme(value: unknown): value is Theme {\n  return typeof value === \"string\" && themes.includes(value as Theme);\n}\n\n/**\n * Theme Provider\n */\nfunction ThemeProvider({\n  children,\n  specifiedTheme,\n}: {\n  children: ReactNode;\n  specifiedTheme: Theme | null;\n}) {\n  const [theme, setTheme] = useState<Theme | null>(() => {\n    if (specifiedTheme) {\n      if (themes.includes(specifiedTheme)) {\n        return specifiedTheme;\n      } else {\n        return null;\n      }\n    }\n    if (typeof window !== \"object\") return null;\n\n    return getPreferredTheme();\n  });\n\n  const persistTheme = useFetcher();\n  const persistThemeRef = useRef(persistTheme);\n\n  useEffect(() => {\n    persistThemeRef.current = persistTheme;\n  }, [persistTheme]);\n\n  const mountRun = useRef(false);\n  useEffect(() => {\n    if (!mountRun.current) {\n      mountRun.current = true;\n      return;\n    }\n    if (!theme) return;\n    persistThemeRef.current.submit(\n      { theme },\n      { action: \"action/set-theme\", method: \"post\" }\n    );\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={[theme, setTheme]}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\nexport { Theme, ThemeProvider, ThemeScript, useTheme, isTheme };\n", "import { Form, Link, NavLink } from \"@remix-run/react\";\nimport toast from \"react-hot-toast\";\nimport { Theme, useTheme } from \"../utils/ThemeProvider\";\n\ninterface NavbarProps {\n  user?: {\n    username: string;\n  };\n}\n\nconst notifyLogout = () => {\n  toast.success(\"Logged out\", { id: \"auth-toast\" });\n};\n\nexport default function Navbar({ user }: NavbarProps) {\n  const [currentTheme, setTheme] = useTheme();\n\n  const toggleTheme = () => {\n    console.log(\"theme\"); // TODO: Fix theme button\n    setTheme((prevTheme) =>\n      prevTheme === Theme.LIGHT ? Theme.DARK : Theme.LIGHT\n    );\n  };\n  return (\n    <header className=\"flex justify-between items-center px-1 sm:px-4 pb-2 pt-3\">\n      <nav className=\"grid gap-4 grid-flow-col items-baseline\">\n        <Link className=\"font-black tracking-tighter text-xl\" to=\"/\">\n          <span className=\"hidden sm:inline\">BackyTracky</span>\n          <span className=\"sm:hidden\">BT</span>\n        </Link>\n        <NavLink to=\"/tracks\">Tracks</NavLink>\n        <NavLink to=\"/generator\">Generate</NavLink>\n        <NavLink to=\"/tuner\">Tuner</NavLink>\n      </nav>\n      <nav className=\"grid gap-4 grid-flow-col items-center\">\n        {user?.username && (\n          <NavLink className=\"button--cta\" to=\"/track/new\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-5 w-5\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </NavLink>\n        )}\n        {user ? (\n          <Form className=\"hidden sm:block\" method=\"post\" action=\"/logout\">\n            <button onClick={notifyLogout} type=\"submit\">\n              Logout\n            </button>\n          </Form>\n        ) : (\n          <>\n            <NavLink className=\"hidden sm:block\" to=\"/login\">\n              Login\n            </NavLink>\n            {/* <NavLink to=\"/auth/register\">Register</NavLink> */}\n          </>\n        )}\n\n        <button className=\"text-xl\" onClick={toggleTheme}>\n          {currentTheme === Theme.LIGHT ? \"\uD83C\uDF1A\" : \"\uD83D\uDE0E\"}\n        </button>\n      </nav>\n    </header>\n  );\n}\n", "import { createCookieSessionStorage, json, redirect } from \"@remix-run/node\";\nimport bcrypt from \"bcryptjs\";\n\nimport { db } from \"./db.server\";\n\ntype LoginForm = {\n  username: string;\n  password: string;\n};\n\nexport async function login({ username, password }: LoginForm) {\n  const user = await db.user.findUnique({\n    where: { username },\n  });\n  if (!user) return null;\n\n  const isCorrectPassword = await bcrypt.compare(password, user.passwordHash);\n  if (!isCorrectPassword) return null;\n\n  return { id: user.id, username };\n}\n\nconst sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret) {\n  throw new Error(\"SESSION_SECRET must bet set!\");\n}\n\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"BT_session\",\n    secure: process.env.NODE_ENV === \"production\", // insecure for localhost\n    secrets: [sessionSecret],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true,\n  },\n});\n\nfunction getUserSession(request: Request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\n\nexport async function getUserId(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") return null;\n  return userId;\n}\n\nexport async function requireUserId(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    throw redirect(`/login`);\n  }\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n\n  try {\n    const user = await db.user.findUnique({\n      where: { id: userId },\n      select: { id: true, username: true },\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\n\nexport async function logout(request: Request) {\n  const session = await getUserSession(request);\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session),\n    },\n  });\n}\n\nexport async function createUserSession(\n  userId: string,\n  redirectTo: string = \"/tracks\"\n) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session),\n    },\n  });\n}\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet db: PrismaClient;\n\ndeclare global {\n  var __db: PrismaClient | undefined;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === \"production\") {\n  db = new PrismaClient();\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient();\n  }\n  db = global.__db;\n}\n\nexport { db };\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\nimport type { Theme } from \"./ThemeProvider\";\nimport { isTheme } from \"./ThemeProvider\";\n\nconst sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret) {\n  throw new Error(\"SESSION_SECRET must be set\");\n}\n\nconst themeStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"BT_theme\",\n    secure: process.env.NODE_ENV === \"production\", // insecure for localhost\n    secrets: [sessionSecret],\n    sameSite: \"lax\",\n    path: \"/\",\n    httpOnly: true,\n  },\n});\n\nasync function getThemeSession(request: Request) {\n  const session = await themeStorage.getSession(request.headers.get(\"Cookie\"));\n\n  return {\n    getTheme: () => {\n      const themeValue = session.get(\"theme\");\n      return isTheme(themeValue) ? themeValue : null;\n    },\n    setTheme: (theme: Theme) => session.set(\"theme\", theme),\n    commit: () => themeStorage.commitSession(session),\n  };\n}\n\nexport { getThemeSession };\n", "export default function RegisterRoute() {\n  return (\n    <main>\n      <section>\n        <div className=\"max-w-sm mx-auto pt-8\">\n          <h1>Register \uD83D\uDCD1</h1>\n        </div>\n      </section>\n    </main>\n  );\n}\n", "import type { LoaderFunction, MetaFunction } from \"@remix-run/node\";\nimport { redirect, json } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { Suspense } from \"react\";\nimport PageHeader from \"~/components/PageHeader\";\nimport TrackPlayer from \"~/components/track/TrackPlayer.client\";\nimport { getTrack } from \"~/utils/tracks.server\";\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  if (!params.trackId) return redirect(\"/tracks\");\n  const track = await getTrack(params.trackId);\n\n  return json({ track });\n};\n\nexport const meta: MetaFunction<typeof loader> = ({ data }) => {\n  return [\n    {\n      title: `${data.track.name} Backing Track | BackyTracky`,\n    },\n    {\n      name: \"description\",\n      content: data.track.description,\n    },\n  ];\n};\n\nexport default function TrackDetailRoute() {\n  const { track } = useLoaderData<typeof loader>();\n  return (\n    <main className=\"main\">\n      <PageHeader title={track.name}>\n        <Link to=\"/\">Home</Link>\n        <span>{\" / \"}</span>\n        <Link to=\"/tracks\">Tracks</Link>\n        <span>{\" / \"}</span>\n        <Link to={`/track/${track.id}`}>{track.name}</Link>\n      </PageHeader>\n      <section>\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"opacity-50 text-xs flex justify-between\">\n            <span>\n              Suggested time: <strong>{track.bpm}</strong> bpm\n            </span>\n            <div>\n              <span>\n                Created by <strong>{track.authorName}</strong>, in{\" \"}\n                {new Date(track.createdAt).toLocaleDateString(\"en-US\", {\n                  year: \"numeric\",\n                  month: \"long\",\n                })}\n              </span>\n            </div>\n          </div>\n\n          <Suspense fallback={<p>Loading...</p>}>\n            <TrackPlayer sheet={track.sheet} bpm={track.bpm} />\n          </Suspense>\n        </div>\n      </section>\n    </main>\n  );\n}\n", "import type { ReactNode } from \"react\";\n\nexport default function PageHeader({\n  title,\n  children,\n}: {\n  title: string;\n  children: ReactNode;\n}) {\n  return (\n    <section className=\"border-b border-zinc-500 border-opacity-10 bg-gradient-to-b from-zinc-50 to-white dark:from-zinc-900 dark:to-gray-1000\">\n      <div className=\"bg-white dark:bg-black absolute top-0 left-0 right-0 h-1 -z-10\">\n        <div className=\"color-change z-10 w-full top-0 h-full bg-opacity-10 absolute pointer-events-none\"></div>\n      </div>\n      <div className=\"max-w-4xl mx-auto relative\">\n        <div className=\"page-header__breadcrumbs\">{children}</div>\n        <h1 className=\"font-black\">{title}</h1>\n      </div>\n    </section>\n  );\n}\n", "import type { Track } from \"@prisma/client\";\nimport { json } from \"@remix-run/node\";\nimport { db } from \"./db.server\";\n\nexport async function createTrack(\n  trackname: string,\n  description: string,\n  chords: string,\n  userId: string,\n  authorName: string,\n  bpm: string\n) {\n  const track = await db.track.create({\n    data: {\n      name: trackname,\n      description: description,\n      authorName: authorName,\n      bpm: parseInt(bpm),\n      sheet: JSON.parse(chords),\n      upvotes: 0,\n      userId: userId,\n    },\n  });\n  return track;\n}\n\nexport async function getTrack(trackId: string) {\n  const track = await db.track.findUnique({\n    where: { id: trackId },\n  });\n  return track as Track;\n}\n\nexport async function deleteTrack(trackId: string) {\n  try {\n    const deletedTrack = await db.track.delete({\n      where: { id: trackId },\n    });\n\n    return json({ message: \"Delete Success\", track: deletedTrack });\n  } catch {\n    return json({ message: \"Delete Error\" }, { status: 400 });\n  }\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport { logout } from \"~/utils/session.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  return await logout(request);\n};\n\nexport const loader: LoaderFunction = async () => {\n  return redirect(\"/login\");\n};\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport BackgroundNotes from \"../components/BackgroundNotes\";\nimport TextInput from \"../components/TextInput\";\nimport { createUserSession, login } from \"~/utils/session.server\";\nimport { validatePassword, validateUsername } from \"./auth/utils\";\n\ntype ActionData = {\n  formError?: string;\n  fieldErrors?: {\n    username: string | undefined;\n    password: string | undefined;\n  };\n  fields?: {\n    username: string;\n    password: string;\n  };\n};\n\nconst badRequest = (data: ActionData) => json(data, { status: 400 });\n\nexport const action: ActionFunction = async ({ request }) => {\n  const form = await request.formData();\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n\n  if (typeof username !== \"string\" || typeof password !== \"string\") {\n    return badRequest({\n      formError: `Form not submitted correctly.`,\n    });\n  }\n\n  const fields = { username, password };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password),\n  };\n\n  if (Object.values(fieldErrors).some(Boolean))\n    return badRequest({ fieldErrors, fields });\n\n  const user = await login({ username, password });\n\n  if (!user) {\n    return badRequest({\n      fields,\n      formError: \"Username/Password combination is incorrect\",\n    });\n  }\n\n  return createUserSession(user.id);\n};\n\nexport default function LoginRoute() {\n  const actionData = useActionData<typeof action>();\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    if (navigation.state === \"submitting\" && navigation.formMethod === \"POST\") {\n      toast.loading(\"Logging in...\", { id: \"auth-toast\" });\n    }\n    if (navigation.state === \"idle\" && actionData?.formError) {\n      toast.error(\"There was an error...\", { id: \"auth-toast\" });\n    }\n    if (navigation.state === \"loading\" && navigation.formMethod === \"POST\") {\n      toast.success(\"You are logged in!\", { id: \"auth-toast\" });\n    }\n  }, [navigation, actionData]);\n\n  return (\n    <main>\n      <section>\n        <div className=\"max-w-sm mx-auto pt-8 relative z-10\">\n          <h1 className=\"\">Login \uD83D\uDD11</h1>\n          <Form className=\"grid gap-4 mt-4\" method=\"post\">\n            <TextInput\n              name=\"username\"\n              label=\"Username\"\n              actionData={actionData}\n            />\n            <TextInput\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              actionData={actionData}\n            />\n\n            <button type=\"submit\" className=\"button\">\n              login\n            </button>\n            <div id=\"form-error-message\">\n              {actionData?.formError ? (\n                <p className=\"form-validation-error text-center\" role=\"alert\">\n                  {actionData.formError}\n                </p>\n              ) : null}\n            </div>\n          </Form>\n\n          <p className=\"text-xs text-center mt-4 text-opacity-50 bg-white dark:bg-zinc-900 p-2 rounded-md\">\n            <a href=\"https://dennissmuda.com/\" className=\"underline\">\n              Contact me\n            </a>{\" \"}\n            if you want to know more, <br /> or if you have song requests \uD83E\uDD18\n          </p>\n        </div>\n      </section>\n      <div className=\"relative pt-32\">\n        <BackgroundNotes />\n      </div>\n    </main>\n  );\n}\n", "export default function BackgroundNotes() {\n  return (\n    <>\n      <div className=\"background-note animation-float-1\">\n        <svg\n          viewBox=\"0 0 126 188\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M62.3862 0V110.104C54.4518 105.522 45.2285 103.689 36.1475 104.891C27.0664 106.093 18.6355 110.262 12.1631 116.752C5.6906 123.241 1.53848 131.688 0.35106 140.782C-0.836364 149.876 1.00729 159.108 5.59595 167.046C10.1846 174.983 17.2616 181.182 25.7289 184.681C34.1961 188.18 43.58 188.783 52.4244 186.396C61.2688 184.01 69.0792 178.767 74.6434 171.482C80.2077 164.196 83.2147 155.276 83.1979 146.105V41.7233H124.919V0H62.3862Z\"\n            className=\"fill-yellow-500\"\n          />\n          <path\n            opacity=\"0.1\"\n            d=\"M118.568 0V34.8754H76.8469V139.257C76.8495 147.096 74.6455 154.777 70.4877 161.42C66.3298 168.062 60.3864 173.397 53.339 176.813C46.2915 180.228 38.4254 181.586 30.6426 180.73C22.8597 179.875 15.4753 176.84 9.33594 171.975C14.7022 178.774 22.05 183.731 30.3589 186.157C38.6677 188.584 47.525 188.359 55.7004 185.514C63.8758 182.67 70.9634 177.346 75.9787 170.284C80.994 163.221 83.6879 154.77 83.6864 146.105V41.7233H125.407V0H118.568Z\"\n            fill=\"black\"\n          />\n        </svg>\n      </div>\n      <div className=\"background-note animation-float-2\">\n        <svg\n          viewBox=\"0 0 126 188\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M62.3862 0V110.104C54.4518 105.522 45.2285 103.689 36.1475 104.891C27.0664 106.093 18.6355 110.262 12.1631 116.752C5.6906 123.241 1.53848 131.688 0.35106 140.782C-0.836364 149.876 1.00729 159.108 5.59595 167.046C10.1846 174.983 17.2616 181.182 25.7289 184.681C34.1961 188.18 43.58 188.783 52.4244 186.396C61.2688 184.01 69.0792 178.767 74.6434 171.482C80.2077 164.196 83.2147 155.276 83.1979 146.105V41.7233H124.919V0H62.3862Z\"\n            className=\"fill-blue-500\"\n          />\n          <path\n            opacity=\"0.1\"\n            d=\"M118.568 0V34.8754H76.8469V139.257C76.8495 147.096 74.6455 154.777 70.4877 161.42C66.3298 168.062 60.3864 173.397 53.339 176.813C46.2915 180.228 38.4254 181.586 30.6426 180.73C22.8597 179.875 15.4753 176.84 9.33594 171.975C14.7022 178.774 22.05 183.731 30.3589 186.157C38.6677 188.584 47.525 188.359 55.7004 185.514C63.8758 182.67 70.9634 177.346 75.9787 170.284C80.994 163.221 83.6879 154.77 83.6864 146.105V41.7233H125.407V0H118.568Z\"\n            fill=\"black\"\n          />\n        </svg>\n      </div>\n      <div className=\"background-note animation-float-3\">\n        <svg\n          viewBox=\"0 0 126 188\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M62.3862 0V110.104C54.4518 105.522 45.2285 103.689 36.1475 104.891C27.0664 106.093 18.6355 110.262 12.1631 116.752C5.6906 123.241 1.53848 131.688 0.35106 140.782C-0.836364 149.876 1.00729 159.108 5.59595 167.046C10.1846 174.983 17.2616 181.182 25.7289 184.681C34.1961 188.18 43.58 188.783 52.4244 186.396C61.2688 184.01 69.0792 178.767 74.6434 171.482C80.2077 164.196 83.2147 155.276 83.1979 146.105V41.7233H124.919V0H62.3862Z\"\n            className=\"fill-red-400\"\n          />\n          <path\n            opacity=\"0.1\"\n            d=\"M118.568 0V34.8754H76.8469V139.257C76.8495 147.096 74.6455 154.777 70.4877 161.42C66.3298 168.062 60.3864 173.397 53.339 176.813C46.2915 180.228 38.4254 181.586 30.6426 180.73C22.8597 179.875 15.4753 176.84 9.33594 171.975C14.7022 178.774 22.05 183.731 30.3589 186.157C38.6677 188.584 47.525 188.359 55.7004 185.514C63.8758 182.67 70.9634 177.346 75.9787 170.284C80.994 163.221 83.6879 154.77 83.6864 146.105V41.7233H125.407V0H118.568Z\"\n            fill=\"black\"\n          />\n        </svg>\n      </div>\n    </>\n  );\n}\n", "export type ActionData = {\n  fields: { name: string };\n  fieldErrors?: { name: string };\n};\n\ninterface InputProps {\n  name: string;\n  label: string;\n  placeholder?: string;\n  required?: boolean;\n  type?: string;\n  actionData?: ActionData;\n}\n\nexport default function TextInput({\n  name,\n  label,\n  actionData,\n  placeholder = \"\",\n  required = false,\n  type = \"text\",\n}: InputProps) {\n  return (\n    <label className=\"form-row\" htmlFor={`${name}-input`}>\n      <span>{label}</span>\n      <input\n        type={type}\n        id={`${name}-input`}\n        name={name}\n        required={required}\n        placeholder={placeholder}\n        defaultValue={actionData?.fields?.name}\n        min={type === \"number\" ? \"30\" : undefined}\n        max={type === \"number\" ? \"280\" : undefined}\n        aria-invalid={Boolean(actionData?.fieldErrors?.name)}\n        aria-errormessage={\n          actionData?.fieldErrors?.name ? `${name}-error` : undefined\n        }\n      />\n      {actionData?.fieldErrors?.name ? (\n        <span\n          className=\"form-validation-error\"\n          role=\"alert\"\n          id={`${name}-error`}\n        >\n          {actionData.fieldErrors.name}\n        </span>\n      ) : null}\n    </label>\n  );\n}\n", "export function validateUsername(username: unknown) {\n  if (typeof username !== \"string\" || username.length < 3) {\n    return `Usernames must be at least 3 characters long`;\n  }\n}\n\nexport function validatePassword(password: unknown) {\n  if (typeof password !== \"string\" || password.length < 6) {\n    return `Passwords must be at least 6 characters long`;\n  }\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\nimport { Suspense } from \"react\";\nimport PageHeader from \"~/components/PageHeader\";\nimport Sequencer from \"~/components/sequencer/Sequencer.client\";\n\nexport const meta: MetaFunction = () => [\n  {\n    title: \"Drum-Sequencer and Chord Progression Generator | BackyTracky\",\n  },\n  {\n    description: \"Generate chord progressions and drum beats!\",\n  },\n];\n\nexport default function GeneratorRoute() {\n  return (\n    <main>\n      <PageHeader title=\"Make your own \uD83E\uDD8B\">\n        <Link to=\"/\">Home</Link>\n        <span>{\" / \"}</span>\n        <Link to=\"/generator\">Sequencer</Link>\n      </PageHeader>\n      <section>\n        <div className=\"container max-w-4xl mx-auto\">\n          {/* <h1>Make your own \uD83E\uDD8B</h1> */}\n          <Suspense fallback={<p>Loading...</p>}>\n            <Sequencer />\n          </Suspense>\n        </div>\n      </section>\n    </main>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport type { MouseEvent } from \"react\";\nimport { useRef, useEffect, useState, Suspense } from \"react\";\nimport { redirect, json } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport TextInput from \"~/components/TextInput\";\nimport {\n  increaseDuration,\n  decreaseDuration,\n  getNextChordTime,\n} from \"~/music/utils\";\nimport ChordBeat from \"~/music/ChordBeat\";\nimport { getUser, requireUserId } from \"~/utils/session.server\";\nimport { createTrack } from \"~/utils/tracks.server\";\nimport ChordEditor from \"~/components/track/ChordEditorModal\";\nimport TrackEditor from \"~/components/track/TrackEditor.client\";\n\ntype Duration = \"1n\" | \"2n\" | \"4n\";\nconst sampleChordConfig = {\n  root: \"C\",\n  type: \"maj\",\n  extension: \"7\",\n  note: [\"C3\", \"E3\", \"G3\", \"B3\"],\n  duration: \"1n\" as Duration,\n  bar: 0,\n  beat: 0,\n  sixteenth: 0,\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  return json({ user });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const userId = await requireUserId(request);\n  const form = await request.formData();\n  const trackname = form.get(\"trackname\");\n  const description = form.get(\"description\");\n  const authorName = form.get(\"author-name\");\n  const bpm = form.get(\"bpm\");\n  const chords = form.get(\"chords\");\n\n  if (\n    typeof trackname !== \"string\" ||\n    typeof chords !== \"string\" ||\n    typeof description !== \"string\" ||\n    typeof authorName !== \"string\" ||\n    typeof bpm !== \"string\"\n  ) {\n    return badRequest({\n      formError: `Form not submitted correctly.`,\n    });\n  }\n\n  const newTrack = await createTrack(\n    trackname,\n    description,\n    chords,\n    userId,\n    authorName,\n    bpm\n  );\n  if (!newTrack) {\n    return badRequest({\n      formError: `couldn't create track!`,\n    });\n  }\n\n  return redirect(`/track/${newTrack.id}`);\n};\nconst badRequest = (data: any) => json(data, { status: 400 });\n\n/**\n * New Track Route\n *\n * @returns React.Component\n */\nexport default function NewTrackRoute() {\n  const actionData = useActionData<typeof action>();\n  const loaderData = useLoaderData<typeof loader>();\n\n  const [isChordEditorOpen, setIsChordEditorOpen] = useState(false);\n  const [chords, setChords] = useState<Array<ChordBeat>>([]);\n  const selectedChord = useRef<ChordBeat | null>(null);\n  const lastChord = useRef<ChordBeat | null>(null);\n\n  useEffect(() => {\n    setChords([new ChordBeat(sampleChordConfig)]);\n  }, []);\n\n  const editChord = (e: MouseEvent, chord: ChordBeat) => {\n    e.preventDefault();\n    selectedChord.current = chord;\n    lastChord.current = chord;\n    setIsChordEditorOpen(true);\n  };\n\n  const finishEditingChord = () => {\n    selectedChord.current = null;\n    setIsChordEditorOpen(false);\n    setChords([...chords]);\n  };\n\n  const shortenChord = (e: MouseEvent, chord: ChordBeat) => {\n    e.preventDefault();\n    chord.duration = decreaseDuration(chord.duration);\n    const chordIndex = chords.indexOf(chord);\n    updateFollowingChords(chordIndex + 1);\n\n    setChords([...chords]);\n  };\n\n  const lengthenChord = (e: MouseEvent, chord: ChordBeat) => {\n    e.preventDefault();\n    chord.duration = increaseDuration(chord.duration);\n    const chordIndex = chords.indexOf(chord);\n    updateFollowingChords(chordIndex + 1);\n\n    setChords([...chords]);\n  };\n\n  const updateFollowingChords = (index: number) => {\n    for (let i = index; i < chords.length; i++) {\n      let previousChord = chords[i - 1];\n      chords[i] = new ChordBeat({\n        ...chords[i],\n        ...getNextChordTime(previousChord),\n      });\n    }\n  };\n\n  const updateChordTimes = () => {\n    chords[0] = new ChordBeat({\n      ...chords[0],\n      bar: 0,\n      beat: 0,\n      sixteenth: 0,\n    });\n    updateFollowingChords(1);\n  };\n\n  const deleteChord = (e: MouseEvent, chord: ChordBeat) => {\n    e.preventDefault();\n    const chordIndex = chords.indexOf(chord);\n    chords.splice(chordIndex, 1);\n    if (chords.length) updateChordTimes();\n\n    setChords([...chords]);\n  };\n\n  const addChord = (e: MouseEvent) => {\n    e.preventDefault();\n\n    const newTime =\n      chords.length > 0\n        ? getNextChordTime(chords[chords.length - 1])\n        : { bar: 0, beat: 0, sixteenth: 0 };\n\n    const newChord = new ChordBeat({\n      root: lastChord?.current?.root || \"C\",\n      type: lastChord?.current?.type || \"maj\",\n      extension: lastChord?.current?.extension || \"7\",\n      note: lastChord?.current?.note || [\"C3\", \"E3\", \"G3\", \"B3\"],\n      duration: lastChord?.current?.duration || \"1n\",\n      ...newTime,\n    });\n\n    if (chords?.length) {\n      setChords([...chords, newChord]);\n    } else {\n      setChords([newChord]);\n    }\n  };\n\n  return (\n    <main>\n      <section>\n        <div className=\"container max-w-4xl mx-auto pt-8\">\n          <Form className=\"flex flex-col gap-4\" method=\"post\">\n            <div className=\"grid grid-cols-6 gap-4\">\n              <div className=\"col-span-5\">\n                <TextInput\n                  name=\"trackname\"\n                  label=\"New Trackname\"\n                  placeholder=\"My awesome backing track\"\n                  required\n                  actionData={actionData}\n                />\n              </div>\n\n              <div className=\"col-span-1\">\n                <TextInput\n                  type=\"number\"\n                  name=\"bpm\"\n                  label=\"BPM\"\n                  placeholder=\"120\"\n                  required\n                  actionData={actionData}\n                />\n              </div>\n            </div>\n\n            <TextInput\n              name=\"description\"\n              label=\"Description\"\n              placeholder=\"Short but sweet progression in C major\"\n              required\n              actionData={actionData}\n            />\n            <input\n              name=\"chords\"\n              type=\"text\"\n              value={JSON.stringify(chords)}\n              className=\"hidden\"\n              readOnly\n            />\n            <input\n              name=\"author-name\"\n              type=\"text\"\n              value={loaderData.user.username}\n              className=\"hidden\"\n              readOnly\n            />\n\n            <div className=\"overflow-x-scroll\">\n              <fieldset className=\"sheet-grid sheet-grid--editor overflow-x-auto\">\n                <legend>Sheet - one full row = count to 4</legend>\n                <Suspense fallback={<p>Loading...</p>}>\n                  <TrackEditor\n                    chords={chords}\n                    shortenChord={shortenChord}\n                    lengthenChord={lengthenChord}\n                    editChord={editChord}\n                    deleteChord={deleteChord}\n                  />\n                </Suspense>\n              </fieldset>\n            </div>\n\n            <button className=\"button\" onClick={addChord}>\n              <span>add chord</span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </button>\n\n            <label className=\"form-row\" htmlFor=\"newChord\">\n              <input\n                name=\"newChord\"\n                disabled={chords.length === 0}\n                type=\"submit\"\n                className=\"button col-span-4\"\n                value=\"save track\"\n              />\n            </label>\n            <div id=\"form-error-message\">\n              {actionData?.formError ? (\n                <p className=\"form-validation-error text-center\" role=\"alert\">\n                  {actionData.formError}\n                </p>\n              ) : null}\n            </div>\n          </Form>\n        </div>\n      </section>\n\n      <ChordEditor\n        isOpen={isChordEditorOpen}\n        currentChord={selectedChord.current}\n        onClose={() => finishEditingChord()}\n      />\n    </main>\n  );\n}\n", "import type { Subdivision } from \"tone/build/esm/core/type/Units\";\nimport type ChordBeat from \"./ChordBeat\";\n\nexport const increaseChordTimeByBeats = (chord: ChordBeat, beats: number) => {\n  let nextBeat = chord.beat as number;\n  let nextBar = chord.bar as number;\n\n  nextBeat += beats;\n  while (nextBeat >= 4) {\n    nextBar += 1;\n    nextBeat -= 4;\n  }\n\n  return {\n    beat: nextBeat,\n    bar: nextBar,\n    sixteenth: 0,\n  };\n};\n\nexport const hasOverflow = (chord: ChordBeat) => {\n  return (\n    (chord.beat >= 1 && chord.duration === \"1n\") ||\n    (chord.beat >= 2 && chord.duration === \"2n.\") ||\n    (chord.beat >= 3 && chord.duration === \"2n\")\n  );\n};\n\nexport const getSplitDurations = (\n  chord: ChordBeat\n): { base: number; ghost: number } => {\n  if (chord.duration === \"1n\") {\n    switch (chord.beat) {\n      case 1:\n        return {\n          base: 3,\n          ghost: 1,\n        };\n      case 2:\n        return {\n          base: 2,\n          ghost: 2,\n        };\n      case 3:\n        return {\n          base: 1,\n          ghost: 3,\n        };\n    }\n  } else if (chord.duration === \"2n.\") {\n    switch (chord.beat) {\n      case 2:\n        return {\n          base: 2,\n          ghost: 1,\n        };\n      case 3:\n        return {\n          base: 1,\n          ghost: 2,\n        };\n    }\n  } else if (chord.duration === \"2n\") {\n    switch (chord.beat) {\n      case 3:\n        return {\n          base: 1,\n          ghost: 1,\n        };\n    }\n  }\n  return {\n    base: 0,\n    ghost: 0,\n  };\n};\n\nexport const increaseDuration = (duration: Subdivision) => {\n  if (duration === \"1n\") return \"1n\";\n  if (duration === \"2n.\") return \"1n\";\n  if (duration === \"2n\") return \"2n.\";\n  if (duration === \"4n\") return \"2n\";\n  return \"1n\";\n};\n\nexport const decreaseDuration = (duration: Subdivision) => {\n  if (duration === \"1n\") return \"2n.\";\n  if (duration === \"2n.\") return \"2n\";\n  if (duration === \"2n\") return \"4n\";\n  if (duration === \"4n\") return \"4n\";\n  return \"4n\";\n};\n\nexport const convertDurationToBeats = (duration: Subdivision) => {\n  switch (duration) {\n    case \"1n\":\n      return 4;\n    case \"2n.\":\n      return 3;\n    case \"2n\":\n      return 2;\n    case \"4n\":\n      return 1;\n    default:\n      return 1;\n  }\n};\n\nexport const getNextChordTime = (previousChord: ChordBeat) => {\n  const c = previousChord;\n  const beats = convertDurationToBeats(c.duration);\n\n  let nextBeat = (c.beat as number) + beats;\n  let nextBar = c.bar as number;\n  if (nextBeat >= 4) {\n    nextBar += 1;\n    nextBeat -= 4;\n  }\n\n  let nextSixteenth = 0;\n\n  return {\n    bar: nextBar,\n    beat: nextBeat,\n    sixteenth: nextSixteenth,\n  };\n};\n\nexport const getChordEndTime = (chord: ChordBeat) => {\n  const beats = convertDurationToBeats(chord.duration);\n\n  let nextBeat = (chord.beat as number) + beats;\n  let nextBar = chord.bar as number;\n  let nextSixteenth = 0;\n\n  return {\n    bar: nextBar,\n    beat: nextBeat,\n    sixteenth: nextSixteenth,\n  };\n};\n", "import type { Subdivision } from \"tone/build/esm/core/type/Units\";\n\nexport type ChordNotes = Array<string>;\n\nexport interface IChordBeat {\n  note: ChordNotes;\n  duration: Subdivision;\n  root: string;\n  type?: string;\n  extension?: string;\n  bar: number;\n  beat: number;\n  sixteenth?: number;\n}\n\nexport default class ChordBeat implements IChordBeat {\n  public note: ChordNotes;\n  public duration: Subdivision;\n  public root: string;\n  public type?: string;\n  public extension?: string;\n  public bar: number;\n  public beat: number;\n  public sixteenth?: number;\n\n  constructor(config: IChordBeat) {\n    this.note = config.note;\n    this.duration = config.duration;\n    this.root = config.root;\n    this.type = config.type;\n    this.extension = config.extension;\n    this.bar = config.bar;\n    this.beat = config.beat;\n    this.sixteenth = config.sixteenth;\n  }\n\n  get time() {\n    return `${this.bar}:${this.beat}:${this.sixteenth || 0}`;\n  }\n\n  get ghostTime() {\n    return \"\";\n  }\n}\n", "import type ChordBeat from \"../../music/ChordBeat\";\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { Chord } from \"@tonaljs/tonal\";\nimport { now } from \"tone\";\n\nimport { useInstruments } from \"../../hooks/useInstruments\";\n\nconst roots: Array<string> = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\nconst flatRoots: Array<string> = [\"Db\", \"Eb\", \"Gb\", \"Ab\", \"Bb\"];\nconst octaves: Array<string> = [\"2\", \"3\", \"4\", \"5\", \"6\"];\nconst chordTypes: Array<string> = [\"\", \"M\", \"maj\", \"min\", \"dim\", \"aug\"];\nconst extensions: Array<string> = [\n  \"\",\n  \"7\",\n  \"7sus4\",\n  \"7b9\",\n  \"6\",\n  \"9\",\n  \"7#9\",\n  \"11\",\n  \"7#11\",\n  \"13\",\n  \"13#11\",\n  \"7#9#11\",\n];\n\nexport default function ChordEditor({\n  isOpen,\n  currentChord,\n  onClose,\n}: {\n  isOpen: boolean;\n  currentChord: ChordBeat | null;\n  onClose: Function;\n}) {\n  const [instruments] = useInstruments();\n  const [newChordName, setNewChordName] = useState<string>(\"\");\n\n  const [newRoot, setNewRoot] = useState<string>(\"C\");\n  const [newType, setNewType] = useState<string>(\"maj\");\n  const [newExtension, setNewExtension] = useState<string>(\"7\");\n  const [newOctave, setNewOctave] = useState<string>(\"3\");\n\n  // Effect hook to generate new chord based on user input\n  useEffect(() => {\n    if (!currentChord) return;\n\n    const newChord = Chord.getChord(\n      `${newType}${newExtension}`,\n      `${newRoot}${newOctave}`\n    );\n\n    // Sometimes tonal.js CAN'T generate notes that tone.js agrees with\n    let isChordBroken = newChord.empty;\n    newChord.notes.forEach((note) => {\n      if (note.includes(\"##\")) isChordBroken = true;\n    });\n\n    if (isChordBroken) return setNewChordName(\"Try something else..\");\n\n    currentChord.note = newChord.notes;\n    currentChord.root = newRoot;\n    currentChord.type = newType;\n    currentChord.extension = newExtension;\n    setNewChordName(newChord.symbol);\n\n    instruments?.pianoSampler?.triggerAttackRelease(\n      currentChord.note,\n      \"4n\",\n      now(),\n      0.35\n    );\n  }, [newRoot, newType, newExtension, newOctave, currentChord, instruments]);\n\n  return (\n    <Transition\n      show={isOpen}\n      enter=\"transition duration-100 ease-out\"\n      enterFrom=\"transform scale-95 opacity-0\"\n      enterTo=\"transform scale-100 opacity-100\"\n      leave=\"transition duration-75 ease-out\"\n      leaveFrom=\"transform scale-100 opacity-100\"\n      leaveTo=\"transform scale-95 opacity-0\"\n      as={Fragment}\n    >\n      <Dialog\n        onClose={() => onClose()}\n        className=\"fixed inset-0 z-50 chord-editor-modal\"\n      >\n        <div className=\"fixed inset-0 bg-black/30\" aria-hidden=\"true\" />\n\n        <div className=\"fixed inset-0 flex items-center justify-center p-2\">\n          <Dialog.Panel className=\"w-full max-w-md rounded bg-white p-4 dark:bg-black\">\n            <Dialog.Title>{newChordName || \"Change chord\"}</Dialog.Title>\n            <Dialog.Description className=\"text-xs opacity-50\">\n              Listen to know what works! Not every combination is possible.\n            </Dialog.Description>\n\n            <span className=\"opacity-50 text-xs\">root</span>\n            <div className=\"grid grid-flow-col gap-2 mb-2\">\n              {roots.map((root) => (\n                <button\n                  key={root}\n                  onClick={() => setNewRoot(root)}\n                  className={`button ${root === newRoot ? \"active\" : \"\"}`}\n                >\n                  {root}\n                </button>\n              ))}\n            </div>\n            <div className=\"grid grid-flow-col gap-2\">\n              {flatRoots.map((root) => (\n                <button\n                  key={root}\n                  onClick={() => setNewRoot(root)}\n                  className={`button ${root === newRoot ? \"active\" : \"\"}`}\n                >\n                  {root}\n                </button>\n              ))}\n            </div>\n\n            <span className=\"opacity-50 text-xs\">type</span>\n            <div className=\"grid grid-flow-col gap-2 mb-2\">\n              {chordTypes.map((type) => (\n                <button\n                  key={type}\n                  onClick={() => setNewType(type)}\n                  className={`button ${type === newType ? \"active\" : \"\"}`}\n                >\n                  {type}\n                </button>\n              ))}\n            </div>\n\n            <span className=\"opacity-50 text-xs\">extension</span>\n            <div className=\"grid grid-rows-2 grid-cols-6 gap-2 mb-2\">\n              {extensions.map((ext) => (\n                <button\n                  key={ext}\n                  onClick={() => setNewExtension(ext)}\n                  className={`button ${ext === newExtension ? \"active\" : \"\"}`}\n                >\n                  {ext}\n                </button>\n              ))}\n            </div>\n\n            <span className=\"opacity-50 text-xs\">octave</span>\n            <div className=\"grid grid-flow-col gap-2 mb-4\">\n              {octaves.map((octave) => (\n                <button\n                  key={octave}\n                  onClick={() => setNewOctave(octave)}\n                  className={`button ${octave === newOctave ? \"active\" : \"\"}`}\n                >\n                  {octave}\n                </button>\n              ))}\n            </div>\n\n            <button\n              className=\"button button--submit w-full\"\n              onClick={() => onClose()}\n            >\n              save chord\n            </button>\n          </Dialog.Panel>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n", "export const version: string = \"14.7.77\";\n", "import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options?: AudioContextOptions): AudioContext {\n\treturn new stdAudioContext(options) as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n\n/**\n * This promise resolves to a boolean which indicates if the \n * functionality is supported within the currently used browse. \n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n", "/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n", "import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n", "import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: ReturnType<typeof setTimeout>;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`\n\t\t], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n", "import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n", "import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals<T>(arrayA: T[], arrayB: T[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: Array<keyof T> = [],\n\tobjKey?: keyof T,\n): T {\n\tconst opts: Partial<T> = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n", "/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions { }\n\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n", "/**\n * The threshold for correctness for operators. Less than one sample even \n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n\n/**\n * Test if A is greater than B\n */\nexport function GT(a: number, b: number): boolean {\n\treturn a > b + EPSILON;\n}\n\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a: number, b: number): boolean {\n\treturn GT(a, b) || EQ(a, b);\n}\n\n/**\n * Test if A is less than B\n */\nexport function LT(a: number, b: number): boolean {\n\treturn a + EPSILON < b;\n}\n\n/**\n * Test if A is less than B\n */\nexport function EQ(a: number, b: number): boolean {\n\treturn Math.abs(a - b) < EPSILON;\n}\n\n/**\n * Clamp the value within the given range\n */\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.max(Math.min(value, max), min);\n}\n", "import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n\tincreasing: boolean;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * If the time value must always be greater than or equal to the last \n\t * element on the list. \n\t */\n\tincreasing: boolean;\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t\tthis.increasing = options.increasing;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t\tincreasing: false,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tassert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tif (this.increasing && this.length) {\n\t\t\tconst lastValue = this._timeline[this.length - 1] as GenericEvent;\n\t\t\tassert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\t\t\tthis._timeline.push(event);\n\t\t} else {\n\t\t\tconst index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t}\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (EQ(this._timeline[index].time, after)) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (EQ(this._timeline[i].time, after)) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (GTE(this._timeline[0].time, after)) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (EQ(event[param], time)) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (EQ(testEvent[param], time)) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (GT(event[param], time)) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n\t\t\tlet lowerBound = upperBound;\n\t\t\tfor (let i = upperBound; i >= 0; i--) {\n\t\t\t\tif (EQ(this._timeline[i].time, time)) {\n\t\t\t\t\tlowerBound = i;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._iterate(event => {\n\t\t\t\tcallback(event);\n\t\t\t}, lowerBound, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n", "//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n", "import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n * @category Core\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = eventList.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n", "import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext =\n\t| \"onstatechange\"\n\t| \"addEventListener\"\n\t| \"removeEventListener\"\n\t| \"listener\"\n\t| \"dispatchEvent\"\n\t| \"audioWorklet\"\n\t| \"destination\"\n\t| \"createScriptProcessor\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<\nBaseAudioContext,\nExcludedFromBaseAudioContext\n>;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory;\n\nexport abstract class BaseContext\n\textends Emitter<\"statechange\" | \"tick\">\n\timplements BaseAudioContextSubset {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode;\n\n\tabstract createOscillator(): OscillatorNode;\n\n\tabstract createBufferSource(): AudioBufferSourceNode;\n\n\tabstract createBiquadFilter(): BiquadFilterNode;\n\n\tabstract createBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer;\n\n\tabstract createChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode;\n\n\tabstract createChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode;\n\n\tabstract createConstantSource(): ConstantSourceNode;\n\n\tabstract createConvolver(): ConvolverNode;\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode;\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode;\n\n\tabstract createGain(): GainNode;\n\n\tabstract createIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode;\n\n\tabstract createPanner(): PannerNode;\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave;\n\n\tabstract createStereoPanner(): StereoPannerNode;\n\n\tabstract createWaveShaper(): WaveShaperNode;\n\n\tabstract createMediaStreamSource(\n\t\t_stream: MediaStream\n\t): MediaStreamAudioSourceNode;\n\n\tabstract createMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode;\n\n\tabstract createMediaStreamDestination(): MediaStreamAudioDestinationNode;\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>;\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode;\n\n\tabstract get rawContext(): AnyAudioContext;\n\n\tabstract async addAudioWorkletModule(\n\t\t_url: string,\n\t\t_name: string\n\t): Promise<void>;\n\n\tabstract lookAhead: number;\n\n\tabstract latencyHint: ContextLatencyHint | Seconds;\n\n\tabstract resume(): Promise<void>;\n\n\tabstract setTimeout(\n\t\t_fn: (...args: any[]) => void,\n\t\t_timeout: Seconds\n\t): number;\n\n\tabstract clearTimeout(_id: number): this;\n\n\tabstract setInterval(\n\t\t_fn: (...args: any[]) => void,\n\t\t_interval: Seconds\n\t): number;\n\n\tabstract clearInterval(_id: number): this;\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode;\n\n\tabstract get currentTime(): Seconds;\n\n\tabstract get state(): AudioContextState;\n\n\tabstract get sampleRate(): number;\n\n\tabstract get listener(): Listener;\n\n\tabstract get transport(): Transport;\n\n\tabstract get draw(): Draw;\n\n\tabstract get destination(): Destination;\n\n\tabstract now(): Seconds;\n\n\tabstract immediate(): Seconds;\n\n\t/*\n\t * This is a placeholder so that JSON.stringify does not throw an error\n\t * This matches what JSON.stringify(audioContext) returns on a native\n\t * audioContext instance.\n\t */\n\ttoJSON(): Record<string, any> {\n\t\treturn {};\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n", "import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport {\n\tAnyAudioContext,\n\tcreateAudioContext,\n\tcreateAudioWorkletNode,\n} from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Listener = import(\"./Listener\").Listener;\ntype Draw = import(\"../util/Draw\").Draw;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint!: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Listener singleton belonging to this context\n\t */\n\tprivate _listener!: Listener;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\n\t\t\t\"context\",\n\t\t]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext({\n\t\t\t\tlatencyHint: options.latencyHint,\n\t\t\t});\n\t\t}\n\n\t\tthis._ticker = new Ticker(\n\t\t\tthis.emit.bind(this, \"tick\"),\n\t\t\toptions.clockSource,\n\t\t\toptions.updateInterval\n\t\t);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\n\t\tthis._setLatencyHint(options.latencyHint);\n\t\tthis.lookAhead = options.lookAhead;\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(\n\t\tnumberOfChannels: number,\n\t\tlength: number,\n\t\tsampleRate: number\n\t): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(\n\t\tnumberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(\n\t\tnumberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(\n\t\tfeedForward: number[] | Float32Array,\n\t\tfeedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamSource(stream);\n\t}\n\tcreateMediaElementSource(\n\t\telement: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaElementSource(element);\n\t}\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamDestination();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\n\t/**\n\t * The listener\n\t */\n\tget listener(): Listener {\n\t\tthis.initialize();\n\t\treturn this._listener;\n\t}\n\tset listener(l) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The listener cannot be set after initialization.\"\n\t\t);\n\t\tthis._listener = l;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The transport cannot be set after initialization.\"\n\t\t);\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tassert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The destination cannot be set after initialization.\"\n\t\t);\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map();\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]].\n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string,\n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tassert(\n\t\t\tisDefined(this.rawContext.audioWorklet),\n\t\t\t\"AudioWorkletNode is only available in a secure context (https or localhost)\"\n\t\t);\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(\n\t\t\t\tname,\n\t\t\t\tthis.rawContext.audioWorklet.addModule(url)\n\t\t\t);\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach((promise) => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance).\n\t * @example\n\t * // prioritize sustained playback\n\t * const context = new Tone.Context({ latencyHint: \"playback\" });\n\t * // set this context as the global Context\n\t * Tone.setContext(context);\n\t * // the global context is gettable with Tone.getContext()\n\t * console.log(Tone.getContext().latencyHint);\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\n\t/**\n\t * Update the lookAhead and updateInterval based on the latencyHint\n\t */\n\tprivate _setLatencyHint(hint: ContextLatencyHint | Seconds): void {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext or OfflineAudioContext\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]].\n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext. See [[Tone.start]]\n\t */\n\tresume(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Close the context. Once closed, the context can no longer be used and\n\t * any AudioNodes created from the context will be silent.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * **Internal** Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(\n\t\t\t\t1,\n\t\t\t\t128,\n\t\t\t\tthis._context.sampleRate\n\t\t\t);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map((val) =>\n\t\t\tthis._constants[val].disconnect()\n\t\t);\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach((event) => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n", "import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tcreateMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\treturn {} as MediaElementAudioSourceNode;\n\t}\n\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\treturn {} as MediaStreamAudioDestinationNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) {}\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) {}\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n", "import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n", "import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst doneLoading: Promise<void> = ToneAudioBuffer.load(url).then(audioBuffer => {\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t});\n\t\tToneAudioBuffer.downloads.push(doneLoading);\n\t\ttry {\n\t\t\tawait doneLoading;\n\t\t} finally {\n\t\t\t// remove the downloaded file\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tassert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<void>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\t// make sure there is a slash between the baseUrl and the url\n\t\tconst baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n\t\tconst response = await fetch(baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\t// this makes sure that the function is always async\n\t\tawait Promise.resolve();\n\t\twhile (ToneAudioBuffer.downloads.length) {\n\t\t\tawait ToneAudioBuffer.downloads[0];\n\t\t}\n\t}\n}\n", "import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5, 44100);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\treadonly isOffline: boolean = true;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, \n\t\tsampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render just the clock portion of the audio context.\n\t */\n\tprivate async _renderClock(asynchronous: boolean): Promise<void> {\n\t\tlet index = 0;\n\t\twhile (this._duration - this._currentTime >= 0) {\n\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\n\t\t\t// increment the clock in block-sized chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\n\t\t\t// yield once a second of audio\n\t\t\tindex++;\n\t\t\tconst yieldEvery = Math.floor(this.sampleRate / 128);\n\t\t\tif (asynchronous && index % yieldEvery === 0) {\n\t\t\t\tawait new Promise(done => setTimeout(done, 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n\t */\n\tasync render(asynchronous = true): Promise<ToneAudioBuffer> {\n\t\tawait this.workletsAreReady();\n\t\tawait this._renderClock(asynchronous);\n\t\tconst buffer = await this._context.startRendering();\n\t\treturn new ToneAudioBuffer(buffer);\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n", "import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise<void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n", "import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n", "import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n", "import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"TimeClass\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Tone.Time(21).quantize(2); // returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * // if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number. The time is computed against the \n * global Tone.Context. To use a specific context, use [[TimeClass]]\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { BaseContext } from \"./BaseContext\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: BaseContext;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: BaseContext;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: BaseContext;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: BaseContext)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t * @example\n\t * setInterval(() => {\n\t * \tconsole.log(Tone.now());\n\t * }, 100);\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t * @example\n\t * setInterval(() => {\n\t * \tconsole.log(Tone.immediate());\n\t * }, 100);\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t * @example\n\t * console.log(Tone.Transport.sampleTime);\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t * @example\n\t * console.log(Tone.Destination.blockTime);\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds. \n\t * This is calculated against the current [[Tone.Transport]] bpm\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n\t * // ramp the tempo to 60 bpm over 30 seconds\n\t * Tone.getTransport().bpm.rampTo(60, 30);\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * console.log(gain.toFrequency(\"4n\"));\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * console.log(gain.toTicks(\"4n\"));\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * console.log(osc.get());\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set multiple properties at once with an object.\n\t * @example\n\t * const filter = new Tone.Filter().toDestination();\n\t * // set values using an object\n\t * filter.set({\n\t * \tfrequency: \"C6\",\n\t * \ttype: \"highpass\"\n\t * });\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n\t * player.autostart = true;\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n", "import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t\tthis.setStateAtTime(this._initial, 0);\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\tassertRange(time, 0);\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { Decibels, Frequency, Positive, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\nimport { assert, assertRange } from \"../util/Debug\";\n\nexport interface ParamOptions<TypeName extends UnitName> extends ToneWithContextOptions {\n\tunits: TypeName;\n\tvalue?: UnitMap[TypeName];\n\tparam: AudioParam | Param<TypeName>;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n\tswappable?: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n * @category Core\n */\nexport class Param<TypeName extends UnitName = \"number\">\n\textends ToneWithContext<ParamOptions<TypeName>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Param\";\n\n\treadonly input: GainNode | AudioParam;\n\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * Private reference to the min and max values if passed into the constructor\n\t */\n\tprivate readonly _minValue?: number;\n\tprivate readonly _maxValue?: number;\n\n\t/**\n\t * If the underlying AudioParam can be swapped out\n\t * using the setParam method. \n\t */\n\tprotected readonly _swappable: boolean;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: TypeName, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tassert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\n\t\tthis._swappable = isDefined(options.swappable) ? options.swappable : false;\n\t\tif (this._swappable) {\n\t\t\tthis.input = this.context.createGain();\n\t\t\t// initialize\n\t\t\tthis._param = options.param;\n\t\t\tthis.input.connect(this._param);\n\t\t} else {\n\t\t\tthis._param = this.input = options.param;\n\t\t}\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\t\tthis._minValue = options.minValue;\n\t\tthis._maxValue = options.maxValue;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value) {\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\t// if it's not the default minValue, return it\n\t\tif (isDefined(this._minValue)) {\n\t\t\treturn this._minValue;\n\t\t} else if (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (isDefined(this._maxValue)) {\n\t\t\treturn this._maxValue;\n\t\t} else if (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Make sure the value is always in the defined range\n\t */\n\tprivate _assertRange(value: number): number {\n\t\tif (isDefined(this.maxValue) && isDefined(this.minValue)) {\n\t\t\tassertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else if (this.overridden) {\n\t\t\t// if it's overridden, should only schedule 0s\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn val as UnitMap[TypeName];\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\t// the value can't be 0\n\t\tnumericValue = EQ(numericValue, 0) ? this._minOutput : numericValue;\n\t\tthis._assertRange(numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tassert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._assertRange(numericValue);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\t\t\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && EQ(before.time, computedTime)) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._param.cancelAndHoldAtTime(computedTime);\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: UnitMap[TypeName], rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Replace the Param's internal AudioParam. Will apply scheduled curves \n\t * onto the parameter and replace the connections.\n\t */\n\tsetParam(param: AudioParam): this {\n\t\tassert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n\t\tconst input = this.input as GainNode;\n\t\tinput.disconnect(this._param);\n\t\tthis.apply(param);\n\t\tthis._param = param;\n\t\tinput.connect(this._param);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): UnitMap[TypeName] {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n", "import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"ToneAudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfInputs);\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfOutputs);\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tassert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * @example\n\t * const osc = new Tone.Oscillator(\"C2\").start();\n\t * osc.toDestination();\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * See [[toDestination]]\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n\t * player.autostart = true;\n\t * const filter = new Tone.AutoFilter(4).start();\n\t * const distortion = new Tone.Distortion(0.5);\n\t * // connect the player to the filter, distortion and then to the master output\n\t * player.chain(filter, distortion, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n\t * player.autostart = true;\n\t * const pitchShift = new Tone.PitchShift(4).toDestination();\n\t * const filter = new Tone.Filter(\"G5\").toDestination();\n\t * // connect a node to the pitch shift and filter in parallel\n\t * player.fan(pitchShift, filter);\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile ((dstNode instanceof ToneAudioNode || dstNode instanceof Param)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n", "import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t * @example\n\t * const gainNode = new Tone.Gain(0).toDestination();\n\t * const osc = new Tone.Oscillator().connect(gainNode).start();\n\t * gainNode.gain.rampTo(1, 0.1);\n\t * gainNode.gain.rampTo(0, 2, \"+0.5\");\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<\n\tOptions extends ToneAudioNodeOptions\n> extends ToneAudioNode<Options> {\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tassert(\n\t\t\tthis._startTime === -1,\n\t\t\t\"Source cannot be started more than once\"\n\t\t);\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime + fadeInTime\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime,\n\t\t\t\t\tfadeInTime\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tassert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail =\n\t\t\t\tthis._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tconst disposeCallback = () => this.dispose();\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (typeof window.requestIdleCallback !== \"undefined\") {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\twindow.requestIdleCallback(disposeCallback);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(disposeCallback, 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (\n\t\t\tthis._startTime !== -1 &&\n\t\t\tcomputedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)\n\t\t) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tassert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(\n\t\t\tthis._startTime + this.sampleTime\n\t\t);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<TypeName extends UnitName = \"number\"> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n", "import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<TypeName extends UnitName> extends ParamOptions<TypeName> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<TypeName extends \"hertz\" | \"bpm\"> extends Param<TypeName> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  event The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.cancelScheduledValues(0);\n\t\tthis.setValueAtTime(currentVal, 0);\n\t}\n}\n", "import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\nimport { EQ } from \"../util/Math\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tunits: \"bpm\" | \"hertz\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<TypeName extends \"bpm\" | \"hertz\"> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<TypeName>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: number);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units as TypeName,\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: number, endTime: number, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(startTime);\n\t\tthis._state.forEachBetween(startTime, endTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error: Error | null = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\") {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, startTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = Math.ceil(diff) - diff;\n\t\t\t// guard against floating point issues\n\t\t\toffset = EQ(offset, 1) ? 0 : offset;\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < endTime) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n\ntype ClockCallback = (time: Seconds, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: Hertz;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock<TypeName extends \"bpm\" | \"hertz\" = \"hertz\">\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<TypeName>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<TypeName>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is running\n\t\tassertContextRunning(this.context);\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * const clock = new Tone.Clock(time => {\n\t * \tconsole.log(time);\n\t * }, 1);\n\t * clock.start();\n\t * // stop the clock after 10 seconds\n\t * clock.stop(\"+10\");\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"stop\", computedTime);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\treturn this._tickSource.getTimeOfTick(tick, before);\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  offset The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\t\tthis.log(\"loop\", startTime, endTime);\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\":\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\":\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\":\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * const clock = new Tone.Clock();\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n", "import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tassert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t * @param  onerror  Invoked if the buffer can't be loaded\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t\tonerror: (e: Error) => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n", "import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t * @example\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tTone.Draw.schedule(() => console.log(time), time);\n\t * }, 1);\n\t * Tone.Transport.start();\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.draw = new Draw({ context });\n});\n\nonContextClose(context => {\n\tcontext.draw.dispose();\n});\n", "import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tassert(isDefined(event.time), \"Events must have a time property\");\n\t\tassert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * const vol = new Tone.Volume().toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const vol = new Tone.Volume(-12).toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Volume } from \"../../component/channel/Volume\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output in decibels. -Infinity is silent, and 0 is no change. \n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * osc.start();\n\t * // ramp the volume down to silent over 10 seconds\n\t * Tone.getDestination().volume.rampTo(-Infinity, 10);\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const oscillator = new Tone.Oscillator().start().toDestination();\n\t * setTimeout(() => {\n\t * \t// mute the output\n\t * \tTone.Destination.mute = true;\n\t * }, 1000);\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @example\n\t * // route all audio through a filter and compressor\n\t * const lowpass = new Tone.Filter(800, \"lowpass\");\n\t * const compressor = new Tone.Compressor(-18);\n\t * Tone.Destination.chain(lowpass, compressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t * @example\n\t * console.log(Tone.Destination.maxChannelCount);\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n", "import { Timeline, TimelineEvent } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\n\ninterface TimelineValueEvent<T> extends TimelineEvent {\n\tvalue: T;\n}\n\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue<Type> extends Tone {\n\n\treadonly name: string = \"TimelineValue\";\n\n\t/**\n\t * The timeline which stores the values\n\t */\n\tprivate _timeline: Timeline<TimelineValueEvent<Type>> = new Timeline({ memory: 10 })\n\n\t/**\n\t * Hold the value to return if there is no scheduled values\n\t */\n\tprivate _initialValue: Type;\n\n\t/**\n\t * @param initialValue The value to return if there is no scheduled values\n\t */\n\tconstructor(initialValue: Type) {\n\n\t\tsuper();\n\t\tthis._initialValue = initialValue;\n\t}\n\n\t/**\n\t * Set the value at the given time\n\t */\n\tset(value: Type, time: Seconds): this {\n\t\tthis._timeline.add({\n\t\t\tvalue, time\n\t\t});\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Get the value at the given time\n\t */\n\tget(time: Seconds): Type {\n\t\tconst event = this._timeline.get(time);\n\t\tif (event) {\n\t\t\treturn event.value;\n\t\t} else {\n\t\t\treturn this._initialValue;\n\t\t}\n\t}\n}\n", "import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n", "import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n", "import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport {\n\tBarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime\n} from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tprivate _loop: TimelineValue<boolean> = new TimelineValue(false);\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<\"bpm\">;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * Tone.Transport.bpm.value = 80;\n\t * // start/stop the oscillator every quarter note\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"4n\");\n\t * Tone.Transport.start();\n\t * // ramp the bpm to 120 over 10 seconds\n\t * Tone.Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<\"bpm\">;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<\"bpm\">;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.setValueAtTime(options.bpm, 0);\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// do the loop test\n\t\tif (this._loop.get(tickTime)) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * // schedule an event on the 16th measure\n\t * Tone.Transport.schedule((time) => {\n\t * \t// invoked on measure 16\n\t * \tconsole.log(\"measure 16!\");\n\t * }, \"16:0:0\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * // a callback invoked every eighth note after the first measure\n\t * Tone.Transport.scheduleRepeat((time) => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * // start the transport in one second starting at beginning of the 5th measure.\n\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Tone.Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * // common time\n\t * Tone.Transport.timeSignature = 4;\n\t * // 7/8\n\t * Tone.Transport.timeSignature = [7, 8];\n\t * // this will be reduced to a single number\n\t * Tone.Transport.timeSignature; // returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop.get(this.now());\n\t}\n\tset loop(loop) {\n\t\tthis._loop.set(loop, this.now());\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * // loop over the first measure\n\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t * Tone.Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\t\t// schedule to start on the next tick, #573\n\t\t\t\tconst remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);\n\t\t\t\tconst time = now + remainingTick;\n\t\t\t\tthis.emit(\"stop\", time);\n\t\t\t\tthis._clock.setTicksAtTime(t, time);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * // the transport must be started, otherwise returns 0\n\t * Tone.Transport.start(); \n\t * Tone.Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n", "import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck\";\nimport { assert, assertContextRunning } from \"../core/util/Debug\";\nimport { GT } from \"../core/util/Math\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. \n * start/stop of this.context.transport.\n * \n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * const source = new Tone.PWMOscillator().toDestination();\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\t\tthis._state.increasing = true;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/ahntone_c3.mp3\", () => {\n\t * \tplayer.start();\n\t * \tconsole.log(player.state);\n\t * }).toDestination();\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * // mute the output\n\t * osc.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tprotected abstract _restart(time: Seconds, offset?: Time, duration?: Time): void;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * const source = new Tone.Oscillator().toDestination();\n\t * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (!this._synced && this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\t// time should be strictly greater than the previous start time\n\t\t\tassert(GT(computedTime, (this._state.get(computedTime) as StateTimelineEvent).time), \"Start time must be strictly greater than previous start time\");\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.log(\"restart\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis.log(\"start\", computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if the transport is already started\n\t\t\t\t// and the time is greater than where the transport is\n\t\t\t\tif (this.context.transport.state === \"started\" && \n\t\t\t\t\tthis.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertContextRunning(this.context);\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * const source = new Tone.Oscillator().toDestination();\n\t * source.start();\n\t * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n\t\t\tthis.log(\"stop\", computedTime);\n\t\t\tif (!this._synced) {\n\t\t\t\tthis._stop(computedTime);\n\t\t\t} else {\n\t\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\t\t\t}\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the source.\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._restart(time, offset, duration);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * osc.sync().start(0).stop(0.3);\n\t * // start the transport.\n\t * Tone.Transport.start();\n\t * // set it to loop once a second\n\t * Tone.Transport.loop = true;\n\t * Tone.Transport.loopEnd = 1;\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration: number | undefined;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\t// stop it also\n\t\tthis._stop(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n", "import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\turl: string | AudioBuffer | ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<\"positive\">;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted = false;\n\tprivate _sourceStopped = false;\n\n\t/**\n\t * @param url The buffer to play or url to load\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(url?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\turl: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tassert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (GTE(computedOffset, loopEnd)) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t\t// when the offset is very close to the duration, set it to 0\n\t\t\tif (EQ(computedOffset, this.buffer.duration)) {\n\t\t\t\tcomputedOffset = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (LT(computedOffset, this.buffer.duration)) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped && this._sourceStarted) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * const noise = new Tone.Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tassert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\turl: buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\tprotected _restart(time?: Time): void {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n", "import { AudioRange, Cents, Degrees, Frequency, Positive } from \"../../core/type/Units\";\nimport { Omit } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { SourceOptions } from \"../Source\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n\n/**\n * The common interface of all Oscillators\n */\nexport interface ToneOscillatorInterface {\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * osc.type = \"sine2\";\n\t * console.log(osc.baseType); // \"sine\"\n\t */\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n\n\t/**\n\t * The oscillator's type. Also capable of setting the first x number of partials of the oscillator. \n\t * For example: \"sine4\" would set be the first 4 partials of the sine wave and \"triangle8\" would \n\t * set the first 8 partials of the triangle wave.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.Oscillator().toDestination().start();\n\t * \tosc.type = \"sine2\";\n\t * }, 0.1, 1);\n\t */\n\ttype: ExtendedToneOscillatorType;\n\n\t/**\n\t * The frequency value of the oscillator\n\t * @example\n\t * const osc = new Tone.FMOscillator(\"Bb4\").toDestination().start();\n\t * osc.frequency.rampTo(\"D2\", 3);\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune value in cents (100th of a semitone).\n\t * @example\n\t * const osc = new Tone.PulseOscillator(\"F3\").toDestination().start();\n\t * // pitch it 1 octave = 12 semitones = 1200 cents\n\t * osc.detune.setValueAtTime(-1200, Tone.now());\n\t * osc.detune.setValueAtTime(1200, Tone.now() + 0.5);\n\t * osc.detune.linearRampToValueAtTime(0, Tone.now() + 1);\n\t * osc.stop(Tone.now() + 1.5);\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The phase is the starting position within the oscillator's cycle. For example\n\t * a phase of 180 would start halfway through the oscillator's cycle. \n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.Oscillator({\n\t * \t\tfrequency: 20,\n\t * \t\tphase: 90\n\t * \t}).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\tphase: Degrees;\n\n\t/**\n\t * The partials describes the relative amplitude of each of the harmonics of the oscillator. \n\t * The first value in the array is the first harmonic (i.e. the fundamental frequency), the \n\t * second harmonic is an octave up, the third harmonic is an octave and a fifth, etc. The resulting\n\t * oscillator output is composed of a sine tone at the relative amplitude at each of the harmonic intervals. \n\t * \n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * const osc = new Tone.Oscillator(\"F3\").toDestination().start();\n\t * setInterval(() => {\n\t * \t// generate 8 random partials\n\t * \tosc.partials = new Array(8).fill(0).map(() => Math.random());\n\t * }, 1000);\n\t */\n\tpartials: number[];\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array. A square wave wave\n\t * is composed of only odd harmonics up through the harmonic series. Partial count\n\t * can limit the number of harmonics which are used to generate the waveform.\n\t * @example\n\t * const osc = new Tone.Oscillator(\"C3\", \"square\").toDestination().start();\n\t * osc.partialCount = 1;\n\t * setInterval(() => {\n\t * \tosc.partialCount++;\n\t * \tconsole.log(osc.partialCount);\n\t * }, 500);\n\t */\n\tpartialCount?: number;\n\n\t/**\n\t * Returns an array of values which represents the waveform.\n\t * @param length The length of the waveform to return\n\t */\n\tasArray(length: number): Promise<Float32Array>;\n}\n\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport async function generateWaveform(instance: any, length: number): Promise<Float32Array> {\n\tconst duration = length / instance.context.sampleRate;\n\tconst context = new OfflineContext(1, duration, instance.context.sampleRate);\n\tconst clone = new instance.constructor(Object.assign(instance.get(), {\n\t\t// should do 2 iterations\n\t\tfrequency: 2 / duration,\n\t\t// zero out the detune\n\t\tdetune: 0,\n\t\tcontext\n\t})).toDestination();\n\tclone.start(0);\n\tconst buffer = await context.render();\n\treturn buffer.getChannelData(0);\n}\n\n/**\n * Oscillators with partials\n */\ntype SineWithPartials =\n\t\"sine1\" | \"sine2\" | \"sine3\" | \"sine4\" | \"sine5\" | \"sine6\" | \"sine7\" | \"sine8\" | \"sine9\" |\n\t\"sine10\" | \"sine11\" | \"sine12\" | \"sine13\" | \"sine14\" | \"sine15\" | \"sine16\" | \"sine17\" | \"sine18\" | \"sine19\" |\n\t\"sine20\" | \"sine21\" | \"sine22\" | \"sine23\" | \"sine24\" | \"sine25\" | \"sine26\" | \"sine27\" | \"sine28\" | \"sine29\" |\n\t\"sine30\" | \"sine31\" | \"sine32\";\n\ntype SquareWithPartials =\n\t\"square1\" | \"square2\" | \"square3\" | \"square4\" | \"square5\" | \"square6\" | \"square7\" | \"square8\" | \"square9\" |\n\t\"square10\" | \"square11\" | \"square12\" | \"square13\" | \"square14\" | \"square15\" | \"square16\" | \"square17\" | \"square18\" | \"square19\" |\n\t\"square20\" | \"square21\" | \"square22\" | \"square23\" | \"square24\" | \"square25\" | \"square26\" | \"square27\" | \"square28\" | \"square29\" |\n\t\"square30\" | \"square31\" | \"square32\";\n\ntype SawtoothWithPartials =\n\t\"sawtooth1\" | \"sawtooth2\" | \"sawtooth3\" | \"sawtooth4\" | \"sawtooth5\" | \"sawtooth6\" | \"sawtooth7\" | \"sawtooth8\" | \"sawtooth9\" |\n\t\"sawtooth10\" | \"sawtooth11\" | \"sawtooth12\" | \"sawtooth13\" | \"sawtooth14\" | \"sawtooth15\" | \"sawtooth16\" | \"sawtooth17\" | \"sawtooth18\" | \"sawtooth19\" |\n\t\"sawtooth20\" | \"sawtooth21\" | \"sawtooth22\" | \"sawtooth23\" | \"sawtooth24\" | \"sawtooth25\" | \"sawtooth26\" | \"sawtooth27\" | \"sawtooth28\" | \"sawtooth29\" |\n\t\"sawtooth30\" | \"sawtooth31\" | \"sawtooth32\";\n\ntype TriangleWithPartials =\n\t\"triangle1\" | \"triangle2\" | \"triangle3\" | \"triangle4\" | \"triangle5\" | \"triangle6\" | \"triangle7\" | \"triangle8\" | \"triangle9\" |\n\t\"triangle10\" | \"triangle11\" | \"triangle12\" | \"triangle13\" | \"triangle14\" | \"triangle15\" | \"triangle16\" | \"triangle17\" | \"triangle18\" | \"triangle19\" |\n\t\"triangle20\" | \"triangle21\" | \"triangle22\" | \"triangle23\" | \"triangle24\" | \"triangle25\" | \"triangle26\" | \"triangle27\" | \"triangle28\" | \"triangle29\" |\n\t\"triangle30\" | \"triangle31\" | \"triangle32\";\n\ntype TypeWithPartials = SineWithPartials | SquareWithPartials | TriangleWithPartials | SawtoothWithPartials;\n\ninterface BaseOscillatorOptions extends SourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n}\n\nexport type NonCustomOscillatorType = Exclude<OscillatorType, \"custom\">;\n\ntype AllNonCustomOscillatorType = NonCustomOscillatorType | TypeWithPartials;\n\nexport type ToneOscillatorType = AllNonCustomOscillatorType | \"custom\";\n\nexport type ExtendedToneOscillatorType = ToneOscillatorType | \"pwm\" | \"pulse\";\n\n/**\n * Oscillator Interfaces\n */\ninterface ToneCustomOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface ToneTypeOscillatorOptions extends BaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface TonePartialOscillatorOptions extends BaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type ToneOscillatorConstructorOptions = ToneCustomOscillatorOptions | ToneTypeOscillatorOptions | TonePartialOscillatorOptions;\n\nexport interface ToneOscillatorOptions extends BaseOscillatorOptions {\n\ttype: ToneOscillatorType;\n\tpartialCount: number;\n\tpartials: number[];\n}\n\n/**\n * FMOscillator Interface\n */\ninterface FMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface FMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface FMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FMConstructorOptions = FMTypeOscillatorOptions | FMCustomOscillatorOptions | FMPartialsOscillatorOptions;\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\n/**\n * AMOscillator Interface\n */\ninterface AMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface AMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface AMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface AMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type AMConstructorOptions = AMCustomOscillatorOptions | AMTypeOscillatorOptions | AMPartialsOscillatorOptions;\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n/**\n * FatOscillator\n */\ninterface FatBaseOscillatorOptions extends BaseOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\ninterface FatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface FatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FatConstructorOptions = FatCustomOscillatorOptions | FatTypeOscillatorOptions | FatPartialsOscillatorOptions;\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\n/**\n * Pulse Oscillator\n */\nexport interface PulseOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pulse\";\n\twidth: AudioRange;\n}\n\n/**\n * PWM Oscillator\n */\nexport interface PWMOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pwm\";\n\tmodulationFrequency: Frequency;\n}\n\n/**\n * OMNI OSCILLATOR\n */\n\n/**\n * FM Oscillators with partials\n */\ntype FMSineWithPartials =\n\t\"fmsine1\" | \"fmsine2\" | \"fmsine3\" | \"fmsine4\" | \"fmsine5\" | \"fmsine6\" | \"fmsine7\" | \"fmsine8\" | \"fmsine9\" |\n\t\"fmsine10\" | \"fmsine11\" | \"fmsine12\" | \"fmsine13\" | \"fmsine14\" | \"fmsine15\" | \"fmsine16\" | \"fmsine17\" | \"fmsine18\" | \"fmsine19\" |\n\t\"fmsine20\" | \"fmsine21\" | \"fmsine22\" | \"fmsine23\" | \"fmsine24\" | \"fmsine25\" | \"fmsine26\" | \"fmsine27\" | \"fmsine28\" | \"fmsine29\" |\n\t\"fmsine30\" | \"fmsine31\" | \"fmsine32\";\n\ntype FMSquareWithPartials =\n\t\"fmsquare1\" | \"fmsquare2\" | \"fmsquare3\" | \"fmsquare4\" | \"fmsquare5\" | \"fmsquare6\" | \"fmsquare7\" | \"fmsquare8\" | \"fmsquare9\" |\n\t\"fmsquare10\" | \"fmsquare11\" | \"fmsquare12\" | \"fmsquare13\" | \"fmsquare14\" | \"fmsquare15\" | \"fmsquare16\" | \"fmsquare17\" | \"fmsquare18\" | \"fmsquare19\" |\n\t\"fmsquare20\" | \"fmsquare21\" | \"fmsquare22\" | \"fmsquare23\" | \"fmsquare24\" | \"fmsquare25\" | \"fmsquare26\" | \"fmsquare27\" | \"fmsquare28\" | \"fmsquare29\" |\n\t\"fmsquare30\" | \"fmsquare31\" | \"fmsquare32\";\n\ntype FMSawtoothWithPartials =\n\t\"fmsawtooth1\" | \"fmsawtooth2\" | \"fmsawtooth3\" | \"fmsawtooth4\" | \"fmsawtooth5\" | \"fmsawtooth6\" | \"fmsawtooth7\" | \"fmsawtooth8\" | \"fmsawtooth9\" |\n\t\"fmsawtooth10\" | \"fmsawtooth11\" | \"fmsawtooth12\" | \"fmsawtooth13\" | \"fmsawtooth14\" | \"fmsawtooth15\" | \"fmsawtooth16\" | \"fmsawtooth17\" | \"fmsawtooth18\" | \"fmsawtooth19\" |\n\t\"fmsawtooth20\" | \"fmsawtooth21\" | \"fmsawtooth22\" | \"fmsawtooth23\" | \"fmsawtooth24\" | \"fmsawtooth25\" | \"fmsawtooth26\" | \"fmsawtooth27\" | \"fmsawtooth28\" | \"fmsawtooth29\" |\n\t\"fmsawtooth30\" | \"fmsawtooth31\" | \"fmsawtooth32\";\n\ntype FMTriangleWithPartials =\n\t\"fmtriangle1\" | \"fmtriangle2\" | \"fmtriangle3\" | \"fmtriangle4\" | \"fmtriangle5\" | \"fmtriangle6\" | \"fmtriangle7\" | \"fmtriangle8\" | \"fmtriangle9\" |\n\t\"fmtriangle10\" | \"fmtriangle11\" | \"fmtriangle12\" | \"fmtriangle13\" | \"fmtriangle14\" | \"fmtriangle15\" | \"fmtriangle16\" | \"fmtriangle17\" | \"fmtriangle18\" | \"fmtriangle19\" |\n\t\"fmtriangle20\" | \"fmtriangle21\" | \"fmtriangle22\" | \"fmtriangle23\" | \"fmtriangle24\" | \"fmtriangle25\" | \"fmtriangle26\" | \"fmtriangle27\" | \"fmtriangle28\" | \"fmtriangle29\" |\n\t\"fmtriangle30\" | \"fmtriangle31\" | \"fmtriangle32\";\n\ntype FMTypeWithPartials = FMSineWithPartials | FMSquareWithPartials | FMSawtoothWithPartials | FMTriangleWithPartials;\n\n/**\n * AM Oscillators with partials\n */\ntype AMSineWithPartials =\n\t\"amsine1\" | \"amsine2\" | \"amsine3\" | \"amsine4\" | \"amsine5\" | \"amsine6\" | \"amsine7\" | \"amsine8\" | \"amsine9\" |\n\t\"amsine10\" | \"amsine11\" | \"amsine12\" | \"amsine13\" | \"amsine14\" | \"amsine15\" | \"amsine16\" | \"amsine17\" | \"amsine18\" | \"amsine19\" |\n\t\"amsine20\" | \"amsine21\" | \"amsine22\" | \"amsine23\" | \"amsine24\" | \"amsine25\" | \"amsine26\" | \"amsine27\" | \"amsine28\" | \"amsine29\" |\n\t\"amsine30\" | \"amsine31\" | \"amsine32\";\n\ntype AMSquareWithPartials =\n\t\"amsquare1\" | \"amsquare2\" | \"amsquare3\" | \"amsquare4\" | \"amsquare5\" | \"amsquare6\" | \"amsquare7\" | \"amsquare8\" | \"amsquare9\" |\n\t\"amsquare10\" | \"amsquare11\" | \"amsquare12\" | \"amsquare13\" | \"amsquare14\" | \"amsquare15\" | \"amsquare16\" | \"amsquare17\" | \"amsquare18\" | \"amsquare19\" |\n\t\"amsquare20\" | \"amsquare21\" | \"amsquare22\" | \"amsquare23\" | \"amsquare24\" | \"amsquare25\" | \"amsquare26\" | \"amsquare27\" | \"amsquare28\" | \"amsquare29\" |\n\t\"amsquare30\" | \"amsquare31\" | \"amsquare32\";\n\ntype AMSawtoothWithPartials =\n\t\"amsawtooth1\" | \"amsawtooth2\" | \"amsawtooth3\" | \"amsawtooth4\" | \"amsawtooth5\" | \"amsawtooth6\" | \"amsawtooth7\" | \"amsawtooth8\" | \"amsawtooth9\" |\n\t\"amsawtooth10\" | \"amsawtooth11\" | \"amsawtooth12\" | \"amsawtooth13\" | \"amsawtooth14\" | \"amsawtooth15\" | \"amsawtooth16\" | \"amsawtooth17\" | \"amsawtooth18\" | \"amsawtooth19\" |\n\t\"amsawtooth20\" | \"amsawtooth21\" | \"amsawtooth22\" | \"amsawtooth23\" | \"amsawtooth24\" | \"amsawtooth25\" | \"amsawtooth26\" | \"amsawtooth27\" | \"amsawtooth28\" | \"amsawtooth29\" |\n\t\"amsawtooth30\" | \"amsawtooth31\" | \"amsawtooth32\";\n\ntype AMTriangleWithPartials =\n\t\"amtriangle1\" | \"amtriangle2\" | \"amtriangle3\" | \"amtriangle4\" | \"amtriangle5\" | \"amtriangle6\" | \"amtriangle7\" | \"amtriangle8\" | \"amtriangle9\" |\n\t\"amtriangle10\" | \"amtriangle11\" | \"amtriangle12\" | \"amtriangle13\" | \"amtriangle14\" | \"amtriangle15\" | \"amtriangle16\" | \"amtriangle17\" | \"amtriangle18\" | \"amtriangle19\" |\n\t\"amtriangle20\" | \"amtriangle21\" | \"amtriangle22\" | \"amtriangle23\" | \"amtriangle24\" | \"amtriangle25\" | \"amtriangle26\" | \"amtriangle27\" | \"amtriangle28\" | \"amtriangle29\" |\n\t\"amtriangle30\" | \"amtriangle31\" | \"amtriangle32\";\n\ntype AMTypeWithPartials = AMSineWithPartials | AMSquareWithPartials | AMSawtoothWithPartials | AMTriangleWithPartials;\n\n/**\n * Fat Oscillators with partials\n */\ntype FatSineWithPartials =\n\t\"fatsine1\" | \"fatsine2\" | \"fatsine3\" | \"fatsine4\" | \"fatsine5\" | \"fatsine6\" | \"fatsine7\" | \"fatsine8\" | \"fatsine9\" |\n\t\"fatsine10\" | \"fatsine11\" | \"fatsine12\" | \"fatsine13\" | \"fatsine14\" | \"fatsine15\" | \"fatsine16\" | \"fatsine17\" | \"fatsine18\" | \"fatsine19\" |\n\t\"fatsine20\" | \"fatsine21\" | \"fatsine22\" | \"fatsine23\" | \"fatsine24\" | \"fatsine25\" | \"fatsine26\" | \"fatsine27\" | \"fatsine28\" | \"fatsine29\" |\n\t\"fatsine30\" | \"fatsine31\" | \"fatsine32\";\n\ntype FatSquareWithPartials =\n\t\"fatsquare1\" | \"fatsquare2\" | \"fatsquare3\" | \"fatsquare4\" | \"fatsquare5\" | \"fatsquare6\" | \"fatsquare7\" | \"fatsquare8\" | \"fatsquare9\" |\n\t\"fatsquare10\" | \"fatsquare11\" | \"fatsquare12\" | \"fatsquare13\" | \"fatsquare14\" | \"fatsquare15\" | \"fatsquare16\" | \"fatsquare17\" | \"fatsquare18\" | \"fatsquare19\" |\n\t\"fatsquare20\" | \"fatsquare21\" | \"fatsquare22\" | \"fatsquare23\" | \"fatsquare24\" | \"fatsquare25\" | \"fatsquare26\" | \"fatsquare27\" | \"fatsquare28\" | \"fatsquare29\" |\n\t\"fatsquare30\" | \"fatsquare31\" | \"fatsquare32\";\n\ntype FatSawtoothWithPartials =\n\t\"fatsawtooth1\" | \"fatsawtooth2\" | \"fatsawtooth3\" | \"fatsawtooth4\" | \"fatsawtooth5\" | \"fatsawtooth6\" | \"fatsawtooth7\" | \"fatsawtooth8\" | \"fatsawtooth9\" |\n\t\"fatsawtooth10\" | \"fatsawtooth11\" | \"fatsawtooth12\" | \"fatsawtooth13\" | \"fatsawtooth14\" | \"fatsawtooth15\" | \"fatsawtooth16\" | \"fatsawtooth17\" | \"fatsawtooth18\" | \"fatsawtooth19\" |\n\t\"fatsawtooth20\" | \"fatsawtooth21\" | \"fatsawtooth22\" | \"fatsawtooth23\" | \"fatsawtooth24\" | \"fatsawtooth25\" | \"fatsawtooth26\" | \"fatsawtooth27\" | \"fatsawtooth28\" | \"fatsawtooth29\" |\n\t\"fatsawtooth30\" | \"fatsawtooth31\" | \"fatsawtooth32\";\n\ntype FatTriangleWithPartials =\n\t\"fattriangle1\" | \"fattriangle2\" | \"fattriangle3\" | \"fattriangle4\" | \"fattriangle5\" | \"fattriangle6\" | \"fattriangle7\" | \"fattriangle8\" | \"fattriangle9\" |\n\t\"fattriangle10\" | \"fattriangle11\" | \"fattriangle12\" | \"fattriangle13\" | \"fattriangle14\" | \"fattriangle15\" | \"fattriangle16\" | \"fattriangle17\" | \"fattriangle18\" | \"fattriangle19\" |\n\t\"fattriangle20\" | \"fattriangle21\" | \"fattriangle22\" | \"fattriangle23\" | \"fattriangle24\" | \"fattriangle25\" | \"fattriangle26\" | \"fattriangle27\" | \"fattriangle28\" | \"fattriangle29\" |\n\t\"fattriangle30\" | \"fattriangle31\" | \"fattriangle32\";\n\ntype FatTypeWithPartials = FatSineWithPartials | FatSquareWithPartials | FatSawtoothWithPartials | FatTriangleWithPartials;\n\n/**\n * Omni FM\n */\ninterface OmniFMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: FMTypeWithPartials;\n}\n\n/**\n * Omni AM\n */\ninterface OmniAMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amcustom\";\n\tpartials: number[];\n}\n\ninterface OmniAMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniAMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: AMTypeWithPartials;\n}\n\n/**\n * Omni Fat\n */\ninterface OmniFatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: FatTypeWithPartials;\n}\n\nexport type OmniOscillatorType =\n\t\"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\" | \"fatcustom\" | FatTypeWithPartials |\n\t\"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\" | \"fmcustom\" | FMTypeWithPartials |\n\t\"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\" | \"amcustom\" | AMTypeWithPartials |\n\tTypeWithPartials | OscillatorType | \"pulse\" | \"pwm\";\n\nexport type OmniOscillatorOptions =\n\tPulseOscillatorOptions | PWMOscillatorOptions |\n\tOmniFatCustomOscillatorOptions | OmniFatTypeOscillatorOptions | OmniFatPartialsOscillatorOptions |\n\tOmniFMCustomOscillatorOptions | OmniFMTypeOscillatorOptions | OmniFMPartialsOscillatorOptions |\n\tOmniAMCustomOscillatorOptions | OmniAMTypeOscillatorOptions | OmniAMPartialsOscillatorOptions |\n\tToneOscillatorConstructorOptions;\n\ntype OmitSourceOptions<T extends BaseOscillatorOptions> = Omit<T, \"frequency\" | \"detune\" | \"context\">;\n\n/**\n * The settable options for the omni oscillator inside of the source which excludes certain attributes that are defined by the parent class\n */\nexport type OmniOscillatorSynthOptions =\n\tOmitSourceOptions<PulseOscillatorOptions> | OmitSourceOptions<PWMOscillatorOptions> |\n\tOmitSourceOptions<OmniFatCustomOscillatorOptions> | OmitSourceOptions<OmniFatTypeOscillatorOptions> | OmitSourceOptions<OmniFatPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniFMCustomOscillatorOptions> | OmitSourceOptions<OmniFMTypeOscillatorOptions> | OmitSourceOptions<OmniFMPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniAMCustomOscillatorOptions> | OmitSourceOptions<OmniAMTypeOscillatorOptions> | OmitSourceOptions<OmniAMPartialsOscillatorOptions> |\n\tOmitSourceOptions<ToneCustomOscillatorOptions> | OmitSourceOptions<ToneTypeOscillatorOptions> | OmitSourceOptions<TonePartialOscillatorOptions>\n", "import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AudioRange, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport {\n\tgenerateWaveform, ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<\"frequency\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<\"cents\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\" as const,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\tprotected _restart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * osc.frequency.value = 440;\n\t * // the ratio between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * // double the tempo\n\t * Tone.Transport.bpm.value *= 2;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t\twave: PeriodicWave;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): { real: Float32Array; imag: Float32Array; partials: number[]; wave: PeriodicWave } | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps;\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps;\n\t\t}\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst { partials, wave } = cache;\n\t\t\t\tthis._wave = wave;\n\t\t\t\tthis._partials = partials;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t\twave: this._wave,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tassertRange(p, 0);\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// extend or shorten the partials array\n\t\t\tconst fullPartials = new Float32Array(p);\n\t\t\t// copy over the partials array\n\t\t\tthis._partials.forEach((v, i) => fullPartials[i] = v);\n\t\t\tthis._partials = Array.from(fullPartials);\n\t\t\tthis.type = this._type;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._partials.slice(0, this.partialCount);\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n\nexport type SignalOperatorOptions = ToneAudioNodeOptions;\n\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends SignalOperatorOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport type WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * const shaper = new Tone.WaveShaper();\n\t * // map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap((val, index) => (val + 1) * 5);\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tassert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See [[GainToAudio]].\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { InputNode, OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<TypeName extends \"number\" | \"positive\" = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain;\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The product of the input and [[factor]]\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._mult = this.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tAMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface,\n\tToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amOsc = new Tone.AMOscillator(\"D2\").toDestination().start();\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Tone.Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tFMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const fmOsc = new Tone.FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst pulse = new Tone.PulseOscillator(20, 0.8).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly width: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _triangle: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._triangle = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"triangle\",\n\t\t});\n\t\tthis.frequency = this._triangle.frequency;\n\t\tthis.detune = this._triangle.detune;\n\n\t\t// connections\n\t\tthis._triangle.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._triangle.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._triangle.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._triangle.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * *Internal use* The carrier oscillator type is fed through the \n\t * waveshaper node to create the pulse. Using different carrier oscillators\n\t * changes oscillator's behavior. \n\t */\n\tset carrierType(type: \"triangle\" | \"sine\") {\n\t\tthis._triangle.type = type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._triangle.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tFatConstructorOptions, FatOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * @param frequency The oscillator's frequency.\n\t * @param type The type of the oscillator.\n\t * @param spread The detune spread between the oscillators.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, spread?: Cents);\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._forEach(osc => osc.restart(time));\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @example\n\t * const fatOsc = new Tone.FatOscillator().toDestination().start();\n\t * fatOsc.spread = 70;\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Must be an integer greater than 1.\n\t * @example\n\t * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n\t * // use 4 sawtooth oscillators\n\t * fatOsc.count = 4;\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tassertRange(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tvolume: -6 - count * 1.1,\n\t\t\t\t\ttype: this._type as NonCustomOscillatorType,\n\t\t\t\t\tphase: this._phase + (i / count) * 360,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t}\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.detune.overridden = false;\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach((osc, i) => osc.phase = this._phase + (i / this.count) * 360);\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n", "import { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The width modulation rate of the oscillator.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.PWMOscillator(20, 2).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\tthis._pulse.carrierType = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tgenerateWaveform,\n\tOmniOscillatorOptions, \n\tOmniOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates all of the oscillator types into one. \n * @example\n * return Tone.Offline(() => {\n * \tconst omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not. \n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n\t * omniOsc.type = \"pwm\";\n\t * // modulationFrequency is parameter which is available\n\t * // only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\tset(props: Partial<OmniOscillatorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n\t * console.log(omniOsc.sourceType); // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator. See [[Oscillator.baseType]]\n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n\t * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * See [[PWMOscillator.width]]\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<\"audioRange\">> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<\"audioRange\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<\"audioRange\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types. \n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index when the sourceType === \"fm\"\n\t * See [[FMOscillator]].\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n\t * see [[PWMOscillator]]\n\t * @min 0.1\n\t * @max 5\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<\"frequency\">> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t}\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n", "import { assertRange } from \"./Debug\";\nimport { Time } from \"../type/Units\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function(target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: number) {\n\t\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function(target: any, propertyKey: string) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: Time) {\n\t\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n", "import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced &&\n\t\t\tthis._state.getValueAtTime(this.now()) === \"started\") {\n\t\t\t// remove the 'implicitEnd' event and replace with an explicit end\n\t\t\tthis._state.cancel(this.now());\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopStart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tconst computedOffset = this.toSeconds(offset);\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\turl: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// cancel the previous stop\n\t\t\tthis._state.cancel(startTime + computedDuration);\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, computedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst computedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, computedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop start time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Normal speed is 1. The pitch will change with the playback rate.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n\t * // play at 1/4 speed\n\t * player.playbackRate = 0.25;\n\t * // play as soon as the buffer is loaded\n\t * player.autostart = true;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * If the buffer should be reversed\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n\t * player.autostart = true;\n\t * player.reverse = true;\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tdecay: Time;\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\t@range(0, 1)\n\tsustain: NormalRange;\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope(0.4).toDestination();\n\t * \tenv.attackCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\trelease: 0.8\n\t * \t}).toDestination();\n\t * \tenv.triggerAttack();\n\t * \t// release curve could also be defined by an array\n\t * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n\t * \tenv.triggerRelease(0.2);\n\t * }, 1, 1);\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\tsustain: 0.1,\n\t * \t\tdecay: 0.5\n\t * \t}).toDestination();\n\t * \tenv.decayCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tassert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack < this.sampleTime) {\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay && this.sustain < 1) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n\t\t\t} else {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator({\n\t * \ttype: \"sawtooth\"\n\t * }).connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (release < this.sampleTime) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tassert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t * @example\n\t * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n\t * env.triggerAttackRelease(2);\n\t * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve. Rescales the duration of the\n\t * envelope to fit the length.\n\t */\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), {\n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n", "import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * const fmSynth = new Tone.FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Tone.Transport.start();\n\t */\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * set _sync\n\t */\n\tprotected _syncState(): boolean {\n\t\tlet changed = false;\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tchanged = true;\n\t\t}\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n", "import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\nimport { timeRange } from \"../core/util/Decorator\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\t@timeRange(0)\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<\"cents\">;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * // trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // trigger the release a second from now\n\t * synth.triggerRelease(\"+1\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tabstract getLevelAtTime(time: Time): NormalRange;\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t) as OmniOscillatorOptions,\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n", "import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n", "/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext: Set<string> = new Set();\n\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction: string) {\n\tworkletContext.add(classOrFunction);\n}\n\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name: string, classDesc: string) {\n\tconst processor = /* javascript */`registerProcessor(\"${name}\", ${classDesc})`;\n\tworkletContext.add(processor);\n}\n\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope(): string {\n\treturn Array.from(workletContext).join(\"\\n\");\n}\n", "import { addToWorklet } from \"./WorkletGlobalScope\";\n\nconst toneAudioWorkletProcessor = /* javascript */ `\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it's disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === \"dispose\") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n`;\n\naddToWorklet(toneAudioWorkletProcessor);\n", "import \"./ToneAudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\n\nexport const singleIOProcess = /* javascript */ `\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n`;\n\naddToWorklet(singleIOProcess);\n", "import { addToWorklet } from \"./WorkletGlobalScope\";\n\nconst delayLine = /* javascript */ `\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n`;\n\naddToWorklet(delayLine);\n", "import \"../../core/worklet/SingleIOProcessor.worklet\";\nimport \"../../core/worklet/DelayLine.worklet\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope\";\n\nexport const workletName = \"feedback-comb-filter\";\n\nconst feedbackCombFilter = /* javascript */`\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"delayTime\",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}, {\n\t\t\t\tname: \"feedback\",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n`;\n\nregisterProcessor(workletName, feedbackCombFilter);\n", "import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tassert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: urlMap,\n\t\t\tonload: options.onload,\n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror,\n\t\t});\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());\n\t\t\tconst midi = Math.round(midiFloat) as MidiNote;\n\t\t\tconst remainder = midiFloat - midi;\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference + remainder);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\turl: buffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tassert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n", "import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tchannelCount: number;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \t// pan hard right\n\t * \tconst panner = new Tone.Panner(1).toDestination();\n\t * \t// pan hard left\n\t * \tpanner.pan.setValueAtTime(-1, 0.25);\n\t * \tconst osc = new Tone.Oscillator(50, \"triangle\").connect(panner).start();\n\t * }, 0.5, 2);\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t\tminValue: -1,\n\t\t\tmaxValue: 1,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = options.channelCount;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n", "import \"../core/worklet/SingleIOProcessor.worklet\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope\";\n\nexport const workletName = \"bit-crusher\";\n\nexport const bitCrusherWorklet = /* javascript */`\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n`;\n\nregisterProcessor(workletName, bitCrusherWorklet);\n", "import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n", "import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733,\n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n", "import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n", "import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tchannelCount: options.channelCount,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string): this {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { Param } from \"./Param\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\n\nexport interface ListenerOptions extends ToneAudioNodeOptions{\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\tforwardX: number;\n\tforwardY: number;\n\tforwardZ: number;\n\tupX: number;\n\tupY: number;\n\tupZ: number;\n}\n\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you \n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context. \n */\nexport class Listener extends ToneAudioNode<ListenerOptions> {\n\n\treadonly name: string = \"Listener\";\n\n\t/**\n\t * The listener has no inputs or outputs. \n\t */\n\toutput: undefined; \n\tinput: undefined; \n\n\treadonly positionX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionX,\n\t})\n\n\treadonly positionY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionY,\n\t})\n\n\treadonly positionZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionZ,\n\t})\n\n\treadonly forwardX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardX,\n\t})\n\n\treadonly forwardY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardY,\n\t})\n\n\treadonly forwardZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardZ,\n\t})\n\n\treadonly upX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upX,\n\t})\n\n\treadonly upY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upY,\n\t})\n\n\treadonly upZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upZ,\n\t})\n\n\tstatic getDefaults(): ListenerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\tforwardX: 0,\n\t\t\tforwardY: 0,\n\t\t\tforwardZ: -1,\n\t\t\tupX: 0,\n\t\t\tupY: 1,\n\t\t\tupZ: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\tthis.forwardX.dispose();\n\t\tthis.forwardY.dispose();\n\t\tthis.forwardZ.dispose();\n\t\tthis.upX.dispose();\n\t\tthis.upY.dispose();\n\t\tthis.upZ.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.listener = new Listener({ context });\n});\n\nonContextClose(context => {\n\tcontext.listener.dispose();\n});\n", "export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\nimport { Seconds } from \"./core/type/Units\";\nexport { supported } from \"./core/context/AudioContext\";\n\n/**\n * The current audio context time of the global [[Context]]. \n * See [[Context.now]]\n * @category Core\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\nexport function immediate(): Seconds {\n\treturn getContext().immediate();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport function getTransport(): import(\"./core/clock/Transport\").Transport {\n\treturn getContext().transport;\n}\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport const Destination = getContext().destination;\n\n/**\n * @deprecated Use [[Destination]]\n */\nexport const Master = getContext().destination;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport function getDestination(): import(\"./core/context/Destination\").Destination {\n\treturn getContext().destination;\n}\n\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\nexport const Listener = getContext().listener;\n\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\nexport function getListener(): import(\"./core/context/Listener\").Listener {\n\treturn getContext().listener;\n}\n\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport const Draw = getContext().draw;\n\n/**\n * Get the singleton attached to the global context. \n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport function getDraw(): import(\"./core/util/Draw\").Draw {\n\treturn getContext().draw;\n}\n\n/**\n * A reference to the global context\n * See [[Context]]\n */\nexport const context = getContext();\n\n/**\n * Promise which resolves when all of the loading promises are resolved. \n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\nexport function loaded() {\n\treturn ToneAudioBuffer.loaded();\n}\n\n// this fills in name changes from 13.x to 14.x\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource\";\nexport const Buffer: typeof ToneAudioBuffer = ToneAudioBuffer;\nexport const Buffers: typeof ToneAudioBuffers = ToneAudioBuffers;\nexport const BufferSource: typeof ToneBufferSource = ToneBufferSource;\n", "import { useEffect, useState } from \"react\";\nimport type { Sampler } from \"tone\";\nimport { loadInstruments } from \"../music/loader\";\n\nexport function useInstruments() {\n  const [instruments, setInstruments] = useState<{\n    pianoSampler: Sampler;\n    drumSampler: Sampler;\n    bassSampler: Sampler;\n  }>();\n\n  useEffect(() => {\n    const { pianoSampler, drumSampler, bassSampler } = loadInstruments();\n\n    setInstruments({ pianoSampler, bassSampler, drumSampler });\n  }, []);\n\n  return [instruments];\n}\n", "import { Sampler } from \"tone\";\n\nexport function loadInstruments(callback?: Function) {\n  const pianoSampler = new Sampler({\n    urls: {\n      A0: \"A0.mp3\",\n      C1: \"C1.mp3\",\n      \"D#1\": \"Ds1.mp3\",\n      \"F#1\": \"Fs1.mp3\",\n      A1: \"A1.mp3\",\n      C2: \"C2.mp3\",\n      \"D#2\": \"Ds2.mp3\",\n      \"F#2\": \"Fs2.mp3\",\n      A2: \"A2.mp3\",\n      C3: \"C3.mp3\",\n      \"D#3\": \"Ds3.mp3\",\n      \"F#3\": \"Fs3.mp3\",\n      A3: \"A3.mp3\",\n      C4: \"C4.mp3\",\n      \"D#4\": \"Ds4.mp3\",\n      \"F#4\": \"Fs4.mp3\",\n      A4: \"A4.mp3\",\n      C5: \"C5.mp3\",\n      \"D#5\": \"Ds5.mp3\",\n      \"F#5\": \"Fs5.mp3\",\n      A5: \"A5.mp3\",\n      C6: \"C6.mp3\",\n      \"D#6\": \"Ds6.mp3\",\n      \"F#6\": \"Fs6.mp3\",\n      A6: \"A6.mp3\",\n      C7: \"C7.mp3\",\n      \"D#7\": \"Ds7.mp3\",\n      \"F#7\": \"Fs7.mp3\",\n      A7: \"A7.mp3\",\n      C8: \"C8.mp3\",\n    },\n    release: 1,\n    baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n    onload: () => {},\n  }).toDestination();\n\n  const bassSampler = new Sampler({\n    urls: {\n      A0: \"A0.mp3\",\n      C1: \"C1.mp3\",\n      \"D#1\": \"Ds1.mp3\",\n      \"F#1\": \"Fs1.mp3\",\n      A1: \"A1.mp3\",\n      C2: \"C2.mp3\",\n      \"D#2\": \"Ds2.mp3\",\n      \"F#2\": \"Fs2.mp3\",\n      A2: \"A2.mp3\",\n      C3: \"C3.mp3\",\n      \"D#3\": \"Ds3.mp3\",\n      \"F#3\": \"Fs3.mp3\",\n      A3: \"A3.mp3\",\n      C4: \"C4.mp3\",\n      \"D#4\": \"Ds4.mp3\",\n      \"F#4\": \"Fs4.mp3\",\n      A4: \"A4.mp3\",\n      C5: \"C5.mp3\",\n      \"D#5\": \"Ds5.mp3\",\n      \"F#5\": \"Fs5.mp3\",\n      A5: \"A5.mp3\",\n      C6: \"C6.mp3\",\n      \"D#6\": \"Ds6.mp3\",\n      \"F#6\": \"Fs6.mp3\",\n      A6: \"A6.mp3\",\n      C7: \"C7.mp3\",\n      \"D#7\": \"Ds7.mp3\",\n      \"F#7\": \"Fs7.mp3\",\n      A7: \"A7.mp3\",\n      C8: \"C8.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n  }).toDestination();\n\n  const drumSampler = new Sampler({\n    urls: {\n      C1: \"kick.mp3\",\n      D1: \"hihat.mp3\",\n      E1: \"snare.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/drum-samples/acoustic-kit/\",\n  }).toDestination();\n\n  if (callback) callback(true);\n\n  return {\n    pianoSampler,\n    bassSampler,\n    drumSampler,\n  };\n}\n", "import { Link } from \"@remix-run/react\";\nimport BackgroundNotes from \"../components/BackgroundNotes\";\nimport Footer from \"../components/Footer\";\nimport type { MetaFunction } from \"@remix-run/node\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { charset: \"utf-8\" },\n    {\n      title: \"Free Backing Tracks for Musicians! | BackyTracky Homepage\",\n    },\n    {\n      name: \"description\",\n      content:\n        \"Create and play-along Lead-Sheets to level up your chops! Practice scales, licks or solos. Discover chord progressions others are using or make your own!\",\n    },\n  ];\n};\n\nexport default function Index() {\n  return (\n    <main className=\"main relative\">\n      <div className=\"bg-white dark:bg-black absolute -top-32 left-0 right-0 h-[280px] -z-10 rotate-1\">\n        <div className=\"color-change z-10 w-full top-0 h-full bg-opacity-10 absolute pointer-events-none\"></div>\n      </div>\n      <section className=\"relative\">\n        <BackgroundNotes />\n        <div className=\"container max-w-4xl mx-auto pt-8 relative z-10\">\n          <div className=\"bt-prose mx-auto my-12\">\n            <h1 className=\"mb-0 rounded-md relative -ml-2 inline-block px-1 font-black\">\n              Welcome to BackyTracky\n            </h1>\n            <p className=\"max-w-lg bg-zinc-50 dark:bg-zinc-900 bg-opacity-10 rounded-md\">\n              <span className=\"sr-only\">Free </span>\n              <strong>Backing Tracks</strong> for Musicians! Play-along some of\n              my favorite lead-sheets to level up your chops... <i>or</i> go\n              ahead and try making something of your own! Practice scales, licks\n              or solos.\n            </p>\n            <Link\n              className=\"button no-underline px-8 dark:text-white\"\n              to=\"/tracks\"\n            >\n              <span>see some tracks</span>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </Link>\n            <Link\n              className=\"button button--submit no-underline px-8 ml-4 dark:text-white\"\n              to=\"/generator\"\n            >\n              <span>make your own</span>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </Link>\n          </div>\n        </div>\n      </section>\n      <section>\n        <div className=\"container max-w-4xl mx-auto\">\n          <div className=\"bt-prose mx-auto my-12\">\n            <h2 className=\"mt-2 font-black\">Features</h2>\n            <ul className=\"max-w-lg\">\n              <li>\n                <strong>Lead-sheets</strong> for some of my favorite tracks,\n                inspired by some of my favorite standards\n              </li>\n              <li>\n                A full blown <strong>Sequencer</strong> that let's you try out\n                some new wild chord progressions!\n              </li>\n              <li>\n                <strong>Guitar Tuner</strong> to help practice tuning your\n                guitar by ear\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      <section>\n        <div className=\"container max-w-4xl mx-auto\">\n          <div className=\"bt-prose mx-auto my-12\">\n            <h2 className=\"mt-2 font-black\">FAQ</h2>\n            <h3 className=\"font-black\">What is all this?</h3>\n            <p className=\"max-w-lg\">\n              The <strong>Tracks</strong> are mainly some chord progressions\n              that I throw together to jam around on. If you have any requests,\n              feel free to{\" \"}\n              <a\n                href=\"https://dennissmuda.com/\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                className=\"underline\"\n              >\n                contact me\n              </a>\n              .\n            </p>\n            <h3 className=\"font-black\">Code?</h3>\n            <p>\n              This project is <strong>open source</strong> and you can{\" \"}\n              <a\n                target=\"_blank\"\n                href=\"https://github.com/DennisSmuda/backytracky-remix/\"\n                rel=\"noopener noreferrer\"\n              >\n                check it out on github\n              </a>\n              ! <br />\n              It uses React (\n              <a\n                target=\"_blank\"\n                href=\"https://remix.run/\"\n                rel=\"noopener noreferrer\"\n              >\n                remix.run\n              </a>\n              ), tailwindcss and prisma and is deployed to netlify. To play and\n              generate music, there is{\" \"}\n              <a\n                href=\"https://tonejs.github.io/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Tone.js\n              </a>{\" \"}\n              and{\" \"}\n              <a\n                href=\"https://github.com/tonaljs/tonal\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                tonal\n              </a>\n              .\n            </p>\n            <h3 className=\"font-black\">Does it cost anything?</h3>\n            <p className=\"max-w-lg\">\n              <strong>No!</strong> As long as I don't just let anyone create\n              accounts and tracks I can maintain BackyTracky for free.\n            </p>\n          </div>\n        </div>\n      </section>\n      <Footer />\n    </main>\n  );\n}\n", "import { Link } from \"@remix-run/react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"p-3 sm:p-6 mt-24\">\n      <div className=\"container max-w-4xl mx-auto pt-8\">\n        <div className=\"flex flex-col md:flex-row justify-between\">\n          <div className=\"flex items-baseline\">\n            <Link className=\"font-black tracking-tighter text-xl\" to=\"/\">\n              BackyTracky\u2122\n            </Link>\n            <Link className=\"ml-8 text-xs opacity-50\" to=\"/tracks\">\n              Tracks\n            </Link>\n            <Link className=\"ml-8 text-xs opacity-50\" to=\"/generator\">\n              Sequencer\n            </Link>\n            <Link className=\"ml-8 text-xs opacity-50\" to=\"/tuner\">\n              Guitar Tuner\n            </Link>\n          </div>\n          <div className=\"mt-2 opacity-50 text-xs\">\n            <span>\n              {new Date().getFullYear()} created by{\" \"}\n              <a\n                href=\"https://dennissmuda.com/\"\n                target=\"blank\"\n                rel=\"nofollower\"\n                className=\"underline hover:no-underline\"\n              >\n                dennissmuda\n              </a>\n            </span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n", "import type { Track } from \"@prisma/client\";\nimport type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Link,\n  useActionData,\n  useLoaderData,\n  useNavigation,\n} from \"@remix-run/react\";\nimport { useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport BackgroundNotes from \"~/components/BackgroundNotes\";\nimport Footer from \"~/components/Footer\";\nimport PageHeader from \"~/components/PageHeader\";\nimport TrackListing from \"~/components/track/TrackListing\";\n\nimport { db } from \"~/utils/db.server\";\nimport { getUser } from \"~/utils/session.server\";\nimport { deleteTrack } from \"~/utils/tracks.server\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const data = {\n    tracks: await db.track.findMany(),\n    user: await getUser(request),\n  };\n\n  return json(data);\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const form = await request.formData();\n  const trackId = form.get(\"trackId\");\n  const response = await deleteTrack(trackId as string);\n\n  if (response.status === 400) {\n    return badRequest({\n      error: `Error deleting track`,\n    });\n  }\n\n  return json({ response });\n};\n\nconst badRequest = (data: any) => json(data, { status: 400 });\n\nexport const meta: MetaFunction = () => [\n  {\n    title: \"All Tracks | BackyTracky\",\n  },\n  {\n    description:\n      \"Explore all published backing tracks. Grab your instrument and practice some chord changes!\",\n  },\n];\n\nexport default function TracksRoute() {\n  const actionData = useActionData<typeof action>();\n  const loaderData = useLoaderData<typeof loader>();\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    if (\n      navigation.state === \"submitting\" &&\n      navigation.formMethod === \"delete\"\n    ) {\n      toast.loading(\"Deleting...\", { id: `track-delete-toast` });\n    }\n    if (navigation.state === \"idle\" && actionData?.error) {\n      toast.error(\"Couldn't delete track...\", {\n        id: `track-delete-toast`,\n      });\n    }\n    if (navigation.state === \"idle\" && actionData?.response) {\n      toast.success(\"Deleted track!\", { id: `track-delete-toast` });\n    }\n  }, [navigation, actionData]);\n\n  return (\n    <main className=\"main\">\n      <div className=\"absolute bottom-24 md:bottom-32 right-0 md:right-20\">\n        <BackgroundNotes />\n      </div>\n      <PageHeader title=\"All Tracks \uD83C\uDFBA\">\n        <Link to=\"/\">Home</Link>\n        <span>{\" / \"}</span>\n        <Link to=\"/tracks\">Tracks</Link>\n      </PageHeader>\n      <section>\n        <div className=\"container max-w-4xl mx-auto relative\">\n          <div className=\"grid gap-12 mb-12 mt-4\">\n            {loaderData.tracks.length === 0 ? <div>no Tracks yet</div> : \"\"}\n            {loaderData.tracks.map((track: Track) => (\n              <TrackListing\n                key={track.id}\n                track={track}\n                showDescription={true}\n                currentUserId={loaderData.user?.id}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </main>\n  );\n}\n", "import type { Track } from \"@prisma/client\";\nimport { Form, Link } from \"@remix-run/react\";\n\nexport default function TrackListing({\n  track,\n  showDescription,\n  currentUserId,\n}: {\n  track: Track;\n  showDescription: boolean;\n  currentUserId: string | null;\n}) {\n  return (\n    <div\n      key={track.id}\n      className=\"flex items-center rounded-lg\"\n      data-testid=\"track-listing\"\n    >\n      <div className=\"flex flex-col flex-grow\">\n        <div className=\"flex items-center gap-4 text-xs opacity-50\">\n          <span>{track.bpm} bpm</span>\n        </div>\n        <Link\n          to={`/track/${track.id}`}\n          className={`${\n            showDescription ? \"text-2xl\" : \"text-lg\"\n          } font-black no-underline hover:underline`}\n        >\n          {track.name}\n        </Link>\n        <div className=\"text-xs opacity-50\">\n          <span className=\"\">\n            created{\" \"}\n            {new Date(track.createdAt).toLocaleDateString(\"en-US\", {\n              year: \"numeric\",\n              month: \"long\",\n            })}\n          </span>\n          <span>, by {track.authorName}</span>\n        </div>\n\n        {/* {showDescription ? (\n          <p className=\"opacity-50 mt-4\">{track.description}</p>\n        ) : (\n          \"\"\n        )} */}\n      </div>\n      {track.userId === currentUserId ? (\n        <Form method=\"delete\">\n          <input type=\"hidden\" name=\"trackId\" value={track.id} />\n          <button className=\"icon-button button--delete\">\n            <span>delete</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </button>\n        </Form>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\nimport { Suspense } from \"react\";\nimport Footer from \"~/components/Footer\";\nimport GuitarTuner from \"~/components/GuitarTuner.client\";\nimport PageHeader from \"~/components/PageHeader\";\n\nexport const meta: MetaFunction = () => [\n  {\n    title: \"Guitar Tuner | BackyTracky\",\n  },\n  {\n    description:\n      \"Practice tuning your guitar by ear! Supports multiple tunings!\",\n  },\n];\n\nexport default function Tuner() {\n  return (\n    <main className=\"main\">\n      <PageHeader title=\"Tune by ear \uD83D\uDC42\">\n        <Link to=\"/\">Home</Link>\n        <span>{\" / \"}</span>\n        <Link to=\"/tuner\">Tuner</Link>\n      </PageHeader>\n\n      <section>\n        <div className=\"max-w-4xl mx-auto relative\">\n          <Suspense fallback={<div>Loading...</div>}>\n            <GuitarTuner />\n          </Suspense>\n        </div>\n      </section>\n\n      <Footer />\n    </main>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-Q4NMUPND.js','imports':['/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-H6S4XAC6.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-AB26UJ6G.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-YNXXVWNE.js','imports':['/build/_shared/chunk-ONLNHW7P.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/_auth.login':{'id':'routes/_auth.login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_auth.login-VLC3G6UT.js','imports':['/build/_shared/chunk-PWSAHRFS.js','/build/_shared/chunk-7MEWGV2P.js','/build/_shared/chunk-V22J52NZ.js'],'hasAction':true,'hasLoader':false,'hasErrorBoundary':false},'routes/_auth.logout':{'id':'routes/_auth.logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_auth.logout-TQQKM25O.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/_auth.register':{'id':'routes/_auth.register','parentId':'root','path':'register','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_auth.register-7MPE3FWW.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-E2S4Y3U7.js','imports':['/build/_shared/chunk-KGOWS3CQ.js','/build/_shared/chunk-PWSAHRFS.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/generator':{'id':'routes/generator','parentId':'root','path':'generator','index':undefined,'caseSensitive':undefined,'module':'/build/routes/generator-7VQPIL7S.js','imports':['/build/_shared/chunk-P6IXS4CZ.js','/build/_shared/chunk-4NFPUYXC.js','/build/_shared/chunk-4TNCM64E.js','/build/_shared/chunk-YDUQ6HJN.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/track.$trackId':{'id':'routes/track.$trackId','parentId':'root','path':'track/:trackId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/track.$trackId-CY6FP4HS.js','imports':['/build/_shared/chunk-P6IXS4CZ.js','/build/_shared/chunk-4NFPUYXC.js','/build/_shared/chunk-Q37BEO7O.js','/build/_shared/chunk-AYITFWIO.js','/build/_shared/chunk-YDUQ6HJN.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/track.new':{'id':'routes/track.new','parentId':'root','path':'track/new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/track.new-KQOGVF7U.js','imports':['/build/_shared/chunk-Q37BEO7O.js','/build/_shared/chunk-AYITFWIO.js','/build/_shared/chunk-7MEWGV2P.js','/build/_shared/chunk-V22J52NZ.js','/build/_shared/chunk-4TNCM64E.js','/build/_shared/chunk-YDUQ6HJN.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/tracks':{'id':'routes/tracks','parentId':'root','path':'tracks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/tracks-TJ5SKG6O.js','imports':['/build/_shared/chunk-KGOWS3CQ.js','/build/_shared/chunk-PWSAHRFS.js','/build/_shared/chunk-4NFPUYXC.js','/build/_shared/chunk-AYITFWIO.js','/build/_shared/chunk-V22J52NZ.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/tuner':{'id':'routes/tuner','parentId':'root','path':'tuner','index':undefined,'caseSensitive':undefined,'module':'/build/routes/tuner-BW32XV57.js','imports':['/build/_shared/chunk-KGOWS3CQ.js','/build/_shared/chunk-4NFPUYXC.js','/build/_shared/chunk-YDUQ6HJN.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false}},'version':'a1815fd3','hmr':{'runtime':'/build/_shared/chunk-AB26UJ6G.js','timestamp':1698009354045},'url':'/build/manifest-A1815FD3.js'};", "\nimport * as entryServer from \"/Users/dennissmuda/dev/backytracky-remix/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/_auth.register.tsx\";\nimport * as route2 from \"./routes/track.$trackId.tsx\";\nimport * as route3 from \"./routes/_auth.logout.tsx\";\nimport * as route4 from \"./routes/_auth.login.tsx\";\nimport * as route5 from \"./routes/generator.tsx\";\nimport * as route6 from \"./routes/track.new.tsx\";\nimport * as route7 from \"./routes/_index.tsx\";\nimport * as route8 from \"./routes/tracks.tsx\";\nimport * as route9 from \"./routes/tuner.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/_auth.register\": {\n      id: \"routes/_auth.register\",\n      parentId: \"root\",\n      path: \"register\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/track.$trackId\": {\n      id: \"routes/track.$trackId\",\n      parentId: \"root\",\n      path: \"track/:trackId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/_auth.logout\": {\n      id: \"routes/_auth.logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/_auth.login\": {\n      id: \"routes/_auth.login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/generator\": {\n      id: \"routes/generator\",\n      parentId: \"root\",\n      path: \"generator\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/track.new\": {\n      id: \"routes/track.new\",\n      parentId: \"root\",\n      path: \"track/new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/tracks\": {\n      id: \"routes/tracks\",\n      parentId: \"root\",\n      path: \"tracks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/tuner\": {\n      id: \"routes/tuner\",\n      parentId: \"root\",\n      path: \"tuner\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    }\n  };"],
  "mappings": "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",
  "names": ["json", "jsxDEV", "Theme", "context", "Fragment", "jsxDEV", "createCookieSessionStorage", "sessionSecret", "createCookieSessionStorage", "jsxDEV", "json", "jsxDEV", "loader", "redirect", "json", "Link", "useLoaderData", "Suspense", "jsxDEV", "json", "json", "jsxDEV", "loader", "redirect", "json", "useLoaderData", "Link", "Suspense", "TrackPlayer", "loader", "redirect", "loader", "redirect", "action", "json", "Form", "useEffect", "toast", "Fragment", "jsxDEV", "jsxDEV", "jsxDEV", "json", "action", "useEffect", "toast", "Form", "meta", "Link", "Suspense", "jsxDEV", "meta", "Link", "Suspense", "Sequencer", "action", "loader", "useRef", "useEffect", "useState", "Suspense", "redirect", "json", "Form", "useActionData", "useLoaderData", "Fragment", "useEffect", "useState", "context", "context", "now", "context", "start", "extensions", "context", "db", "context", "log", "now", "now", "now", "context", "context", "now", "context", "context", "start", "now", "now", "context", "__decorate", "__decorate", "__decorate", "__decorate", "workletName", "context", "Transport", "Destination", "Listener", "Draw", "useEffect", "useState", "useState", "useEffect", "jsxDEV", "useState", "useEffect", "Fragment", "jsxDEV", "loader", "json", "action", "badRequest", "redirect", "useActionData", "useLoaderData", "useState", "useRef", "useEffect", "Form", "Suspense", "TrackEditor", "meta", "Link", "Link", "jsxDEV", "jsxDEV", "meta", "Link", "action", "loader", "meta", "json", "Link", "useActionData", "useLoaderData", "useNavigation", "useEffect", "toast", "Form", "Link", "jsxDEV", "jsxDEV", "loader", "json", "action", "badRequest", "meta", "useActionData", "useLoaderData", "useNavigation", "useEffect", "toast", "Link", "meta", "Link", "Suspense", "jsxDEV", "meta", "Link", "Suspense", "GuitarTuner"]
}
